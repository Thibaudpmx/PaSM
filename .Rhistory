bind_rows() %>%
add_column(DFfix)
tempVP <- self$clone(deep = T)
tempVP$filters_neg_above <- tibble()
tempVP$filters_neg_below <- tibble()
tempVP$algo2list  <- list()
#
# if(nrow(self$poolVP)>0 ){
#
# newVPs <- newVPs %>%
#   left_join(self$poolVP %>% select(!!!parse_exprs(names(newVPs)),  id)) %>%
#   filter(is.na(id)) %>%
#   select(-id)
# }
#
# if(! firstbloc) newVPs <- newVPs %>%
#   left_join(prevVPs %>% mutate(test = 1)) %>%
#   filter(is.na(test)) %>%
#   select(-test)
#
# prevVPs <-newVPs
# newVPs <- invoke(.fn = crossing, .args = VPsparam)%>%
#   add_column(DFfix)
# Compute the new VPs
tempVP$add_VP(newVPs, keepRedFiltaftDis = T, reducefilteratend = F)
# self$n_filter_reduc()
# Compute zone_maybe
test_zone_maybe <-    try({   aezatempVP$compute_zone_maybe()})
# Which become the new blocs
# tempVP$zone_maybe
if(class(test_zone_maybe) != "try-error"){
zone_maybe <- tempVP$zone_maybe
zone_maybe <- reduce_maybe2(zone_maybe)
tempVP$algo2list[["blocs"]] <- zone_maybe %>%
rowid_to_column("blocsPool") %>%
mutate(blocsPool = floor(blocsPool/gatherblocsPool) + 1)
sizetemp <- max(tempVP$algo2list[["blocs"]]$blocsPool)
# ndomain2(tempVP$zone_maybe)
}else{
zone_maybe <- tibble()
tempVP$algo2list[["blocs"]] <- "too big"
sizetemp <- NA
nVPs <- NA
}
# maybe
# tempVP$zone_maybe
if(nrow(zone_maybe)> 0 ){
zone_maybe <- add_nvp_bloc(zone_maybe)
nVPs <- sum(zone_maybe$temp3)
}else if(!is.na(sizetemp)){
nVPs <- 0
sizetemp <- 0
}
tloop <- difftime(Sys.time(), t0, units = "s")
# Deactivate zoom system if needed
timesaved <- (nVP0s - nVPs) * as.double(taddvp) / 200000
if(is.na(timesaved)){
nextsteptype <- "not_computable"
}else if(tloop < 2 * timesaved ) {
nextsteptype <- "all"
}else{
nextsteptype <- "zoom"
}
# nVPs * as.double(taddvp) / 200000
#   as.double(tloop)
newname <- paste0(c(nextstep$Name, nextstep$todo), collapse = "_")
self$algo2list[[newname]] <- tempVP
self$algo2list$tree  <- self$algo2list$tree %>%
add_row(Name = newname, size =  sizetemp, todo = min(nVPs,1), before = nVP0s, after = nVPs, ratio = nVPs/nVP0s,
time = difftime(Sys.time(), t0, units = "s"), what = nextsteptype
)
self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name] <- self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name] + 1
if(self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name] > self$algo2list$tree$size[self$algo2list$tree$Name == nextstep$Name]){
self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name]  <- 0
}
nextstep <-  self$algo2list[["tree"]] %>%
filter(todo != 0 ) %>%
# filter(what == "all") %>%
filter(!is.na(todo)) %>%
slice(1)
# saveRDS(self, "D:/these/Second_project/QSP/modeling_work/VT_simeoni/algo2.RDS")
#
# nextstep <- self$algo2list[["tree"]] %>%
#   filter(Name == newname)
# self$plot_2D(k2, lambda0)
# print("a")
} # end else
nsave <- nsave + 1
if(file != "" &   nsave == save_every){
cat(silver("Saving..."))
saveRDS(self, file)
nsave <- 0
}
# saveRDS(self, "D:/these/Second_project/QSP/modeling_work/VT_simeoni/algo2.RDS")
} # end while loop
self
self$algo2list
self$algo2list$first_1
self$algo2list$tree
self$algo2list$tree %>% tail
readRDS("D:/these/Second_project/QSP/modeling_work/VT_simeoni/testtwodose.RDS")$algo2list$tree %>% tail
while(sum( self$algo2list[["tree"]]$todo) > 0 ){
t0 <- Sys.time()
nextstep <- self$algo2list[["tree"]] %>% filter(todo > 0) %>% slice(1)
print(nextstep)
maybe <-  self$algo2list[[nextstep$Name]] %>%
filter(blocsPool == nextstep$todo)
# if(nextstep$Name !="first") maybe <- maybe$algo2list[[1]]
nVP0s <- sum(maybe$temp3)
if(unique(maybe$todo) == "final"){
# Compute all patient
blocs <- maybe[namesparam] %>%
rowid_to_column("id") %>%
gather("key", "value", -id) %>%
mutate(param = gsub("(min$)|(max$)", "", key)) %>%
mutate(a = map2_chr(param, key, ~ gsub(.x, "", .y))) %>%
select(-key) %>%
spread(a, value) %>%
rename(from = min, to = max) %>%
left_join(domain %>% distinct(param, digits), by = "param")
blocs %>%
mutate(sampl = pmap(list(from, to, digits), function(from, to, digits){
# from = 0; to = 3; digits = 4
temp <- seq(from, to, 10^(-digits) )  %>% unique()
temp[2:max(length(temp)-1,2)]
})) -> VPsparam
# VPsparam
# Cross parameter (per bloc) and add fixed values
newVPs <- VPsparam %>%
group_split(id) %>%
map( function(x){
temp <- invoke(.fn = crossing, x$sampl )
names(temp) <- x$param
temp
}) %>%
bind_rows() %>%
add_column(DFfix)
# newVPs <- newVPs %>% distinct()
#
#       newVPs <-   newVPs %>%
#         rowid_to_column("group") %>%
#         mutate(group = floor(group / 400000) + 1)
tempVP <- self$clone(deep = T)
tempVP$filters_neg_above <- tibble()
tempVP$filters_neg_below <- tibble()
tempVP$algo2list  <- list()
tempVP$poolVP  <- tibble()
# for(a in newVPs$group %>% unique()){
# print(paste0(a, "/", length(newVPs$group %>% unique())))
# newVPs2 <- newVPs %>%
# filter(group == a)
tempVP$add_VP(newVPs, keepRedFiltaftDis = T, reducefilteratend = F, use_green_filter = T, pctActivGreen = 0.1,npersalve = 2000)
#
# }
# print(tempVP)
# tempVP$n_filter_reduc()
newname <- paste0(nextstep$Name,"_", nextstep$todo)
tempVPstorage <- list("neg_above" = tempVP$filters_neg_above, "neg_below" = tempVP$filters_neg_below, "poolVP" = tempVP$poolVP)
self$algo2list[[newname]] <- tempVPstorage
self$algo2list$tree  <- self$algo2list$tree %>%
add_row(Name = newname, size =  0, todo = 0, before = nrow(newVPs), after = nrow( tempVP$poolVP), ratio = 0, what = "Done",
time =   difftime(Sys.time(), t0, units = "s")
)
self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name] <- if_else(nextstep$todo == nextstep$size, 0, nextstep$todo + 1)
# nextstep <-  self$algo2list[["tree"]] %>%
#   filter(todo != 0 ) %>%
#   filter(what == "all") %>%
#   filter(!is.na(todo)) %>%
#   slice(1)
# nextstep <-  self$algo2list[["tree"]] %>%
#   filter(todo != 0 ) %>%
#   # filter(Name == "first") %>%
#   filter(!is.na(todo)) %>%
#   slice(1)
#
# next
}else{
maybe <-  maybe %>%
# self$algo2list[[nextstep$Name]]
filter(blocsPool == todo) %>%
select(-blocsPool)
nVP0s <- sum(maybe$temp3)
blocs <- maybe[namesparam] %>%
rowid_to_column("id") %>%
gather("key", "value", -id) %>%
mutate(param = gsub("(min$)|(max$)", "", key)) %>%
mutate(a = map2_chr(param, key, ~ gsub(.x, "", .y))) %>%
select(-key) %>%
spread(a, value) %>%
rename(from = min, to = max) %>%
left_join(domain %>% distinct(param, digits), by = "param")
nperparam <- ceiling((npersalve/length(unique(blocs$id)))^(1/nrow(domain)))
blocs %>%
mutate(sampl = pmap(list(from, to, digits), function(from, to, digits){
# from = 0; to = 3; digits = 4
# seq(from, to, (to-from)/(nperparam-1)) %>% round(digits) %>% unique()
withbord <- seq(from, to, 10^(-digits)) %>% round(digits) %>% unique()
withbord[2:max(length(withbord)-1,2)]
})) -> VPsparam
# Cross parameter (per bloc) and add fixed values
newVPs <- VPsparam %>%
group_split(id) %>%
map( function(x){
temp <- invoke(.fn = crossing, x$sampl )
names(temp) <- x$param
temp
}) %>%
bind_rows() %>%
add_column(DFfix)
tempVP <- self$clone(deep = T)
tempVP$filters_neg_above <- tibble()
tempVP$filters_neg_below <- tibble()
tempVP$algo2list  <- list()
#
# if(nrow(self$poolVP)>0 ){
#
# newVPs <- newVPs %>%
#   left_join(self$poolVP %>% select(!!!parse_exprs(names(newVPs)),  id)) %>%
#   filter(is.na(id)) %>%
#   select(-id)
# }
#
# if(! firstbloc) newVPs <- newVPs %>%
#   left_join(prevVPs %>% mutate(test = 1)) %>%
#   filter(is.na(test)) %>%
#   select(-test)
#
# prevVPs <-newVPs
# newVPs <- invoke(.fn = crossing, .args = VPsparam)%>%
#   add_column(DFfix)
# Compute the new VPs
tempVP$add_VP(newVPs, keepRedFiltaftDis = T, reducefilteratend = F)
# self$n_filter_reduc()
# Compute zone_maybe
test_zone_maybe <-    try({   aezatempVP$compute_zone_maybe()})
# Which become the new blocs
# tempVP$zone_maybe
if(class(test_zone_maybe) != "try-error"){
zone_maybe <- tempVP$zone_maybe
zone_maybe <- reduce_maybe2(zone_maybe)
tempVP$algo2list[["blocs"]] <- zone_maybe %>%
rowid_to_column("blocsPool") %>%
mutate(blocsPool = floor(blocsPool/gatherblocsPool) + 1)
sizetemp <- max(tempVP$algo2list[["blocs"]]$blocsPool)
# ndomain2(tempVP$zone_maybe)
}else{
zone_maybe <- tibble()
tempVP$algo2list[["blocs"]] <- "too big"
sizetemp <- NA
nVPs <- NA
}
# maybe
# tempVP$zone_maybe
if(nrow(zone_maybe)> 0 ){
zone_maybe <- add_nvp_bloc(zone_maybe)
nVPs <- sum(zone_maybe$temp3)
}else if(!is.na(sizetemp)){
nVPs <- 0
sizetemp <- 0
}
tloop <- difftime(Sys.time(), t0, units = "s")
# Deactivate zoom system if needed
timesaved <- (nVP0s - nVPs) * as.double(taddvp) / 200000
if(is.na(timesaved)){
nextsteptype <- "not_computable"
}else if(tloop < 2 * timesaved ) {
nextsteptype <- "all"
}else{
nextsteptype <- "zoom"
}
# nVPs * as.double(taddvp) / 200000
#   as.double(tloop)
newname <- paste0(c(nextstep$Name, nextstep$todo), collapse = "_")
self$algo2list[[newname]] <- tempVP
self$algo2list$tree  <- self$algo2list$tree %>%
add_row(Name = newname, size =  sizetemp, todo = min(nVPs,1), before = nVP0s, after = nVPs, ratio = nVPs/nVP0s,
time = difftime(Sys.time(), t0, units = "s"), what = nextsteptype
)
self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name] <- self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name] + 1
if(self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name] > self$algo2list$tree$size[self$algo2list$tree$Name == nextstep$Name]){
self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name]  <- 0
}
nextstep <-  self$algo2list[["tree"]] %>%
filter(todo != 0 ) %>%
# filter(what == "all") %>%
filter(!is.na(todo)) %>%
slice(1)
# saveRDS(self, "D:/these/Second_project/QSP/modeling_work/VT_simeoni/algo2.RDS")
#
# nextstep <- self$algo2list[["tree"]] %>%
#   filter(Name == newname)
# self$plot_2D(k2, lambda0)
# print("a")
} # end else
nsave <- nsave + 1
if(file != "" &   nsave == save_every){
cat(silver("Saving..."))
saveRDS(self, file)
nsave <- 0
}
# saveRDS(self, "D:/these/Second_project/QSP/modeling_work/VT_simeoni/algo2.RDS")
} # end while loop
self$algo2list$tree
self$algo2list$tree %>% tail
self$algo2list$tree %>% slice(-1)
self$algo2list$tree %>% slice(-1) %>% pull(after)
while(sum( self$algo2list[["tree"]]$todo) > 0 ){
t0 <- Sys.time()
nextstep <- self$algo2list[["tree"]] %>% filter(todo > 0) %>% slice(1)
print(nextstep)
maybe <-  self$algo2list[[nextstep$Name]] %>%
filter(blocsPool == nextstep$todo)
# if(nextstep$Name !="first") maybe <- maybe$algo2list[[1]]
nVP0s <- sum(maybe$temp3)
if(unique(maybe$todo) == "final"){
# Compute all patient
blocs <- maybe[namesparam] %>%
rowid_to_column("id") %>%
gather("key", "value", -id) %>%
mutate(param = gsub("(min$)|(max$)", "", key)) %>%
mutate(a = map2_chr(param, key, ~ gsub(.x, "", .y))) %>%
select(-key) %>%
spread(a, value) %>%
rename(from = min, to = max) %>%
left_join(domain %>% distinct(param, digits), by = "param")
blocs %>%
mutate(sampl = pmap(list(from, to, digits), function(from, to, digits){
# from = 0; to = 3; digits = 4
temp <- seq(from, to, 10^(-digits) )  %>% unique()
temp[2:max(length(temp)-1,2)]
})) -> VPsparam
# VPsparam
# Cross parameter (per bloc) and add fixed values
newVPs <- VPsparam %>%
group_split(id) %>%
map( function(x){
temp <- invoke(.fn = crossing, x$sampl )
names(temp) <- x$param
temp
}) %>%
bind_rows() %>%
add_column(DFfix)
# newVPs <- newVPs %>% distinct()
#
#       newVPs <-   newVPs %>%
#         rowid_to_column("group") %>%
#         mutate(group = floor(group / 400000) + 1)
tempVP <- self$clone(deep = T)
tempVP$filters_neg_above <- tibble()
tempVP$filters_neg_below <- tibble()
tempVP$algo2list  <- list()
tempVP$poolVP  <- tibble()
# for(a in newVPs$group %>% unique()){
# print(paste0(a, "/", length(newVPs$group %>% unique())))
# newVPs2 <- newVPs %>%
# filter(group == a)
tempVP$add_VP(newVPs, keepRedFiltaftDis = T, reducefilteratend = F, use_green_filter = T, pctActivGreen = 0.1,npersalve = 2000)
#
# }
# print(tempVP)
# tempVP$n_filter_reduc()
newname <- paste0(nextstep$Name,"_", nextstep$todo)
tempVPstorage <- list("neg_above" = tempVP$filters_neg_above, "neg_below" = tempVP$filters_neg_below, "poolVP" = tempVP$poolVP)
self$algo2list[[newname]] <- tempVPstorage
self$algo2list$tree  <- self$algo2list$tree %>%
add_row(Name = newname, size =  0, todo = 0, before = nrow(newVPs), after = nrow( tempVP$poolVP), ratio = 0, what = "Done",
time =   difftime(Sys.time(), t0, units = "s")
)
self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name] <- if_else(nextstep$todo == nextstep$size, 0, nextstep$todo + 1)
# nextstep <-  self$algo2list[["tree"]] %>%
#   filter(todo != 0 ) %>%
#   filter(what == "all") %>%
#   filter(!is.na(todo)) %>%
#   slice(1)
# nextstep <-  self$algo2list[["tree"]] %>%
#   filter(todo != 0 ) %>%
#   # filter(Name == "first") %>%
#   filter(!is.na(todo)) %>%
#   slice(1)
#
# next
}else{
maybe <-  maybe %>%
# self$algo2list[[nextstep$Name]]
filter(blocsPool == todo) %>%
select(-blocsPool)
nVP0s <- sum(maybe$temp3)
blocs <- maybe[namesparam] %>%
rowid_to_column("id") %>%
gather("key", "value", -id) %>%
mutate(param = gsub("(min$)|(max$)", "", key)) %>%
mutate(a = map2_chr(param, key, ~ gsub(.x, "", .y))) %>%
select(-key) %>%
spread(a, value) %>%
rename(from = min, to = max) %>%
left_join(domain %>% distinct(param, digits), by = "param")
nperparam <- ceiling((npersalve/length(unique(blocs$id)))^(1/nrow(domain)))
blocs %>%
mutate(sampl = pmap(list(from, to, digits), function(from, to, digits){
# from = 0; to = 3; digits = 4
# seq(from, to, (to-from)/(nperparam-1)) %>% round(digits) %>% unique()
withbord <- seq(from, to, 10^(-digits)) %>% round(digits) %>% unique()
withbord[2:max(length(withbord)-1,2)]
})) -> VPsparam
# Cross parameter (per bloc) and add fixed values
newVPs <- VPsparam %>%
group_split(id) %>%
map( function(x){
temp <- invoke(.fn = crossing, x$sampl )
names(temp) <- x$param
temp
}) %>%
bind_rows() %>%
add_column(DFfix)
tempVP <- self$clone(deep = T)
tempVP$filters_neg_above <- tibble()
tempVP$filters_neg_below <- tibble()
tempVP$algo2list  <- list()
#
# if(nrow(self$poolVP)>0 ){
#
# newVPs <- newVPs %>%
#   left_join(self$poolVP %>% select(!!!parse_exprs(names(newVPs)),  id)) %>%
#   filter(is.na(id)) %>%
#   select(-id)
# }
#
# if(! firstbloc) newVPs <- newVPs %>%
#   left_join(prevVPs %>% mutate(test = 1)) %>%
#   filter(is.na(test)) %>%
#   select(-test)
#
# prevVPs <-newVPs
# newVPs <- invoke(.fn = crossing, .args = VPsparam)%>%
#   add_column(DFfix)
# Compute the new VPs
tempVP$add_VP(newVPs, keepRedFiltaftDis = T, reducefilteratend = F)
# self$n_filter_reduc()
# Compute zone_maybe
test_zone_maybe <-    try({   aezatempVP$compute_zone_maybe()})
# Which become the new blocs
# tempVP$zone_maybe
if(class(test_zone_maybe) != "try-error"){
zone_maybe <- tempVP$zone_maybe
zone_maybe <- reduce_maybe2(zone_maybe)
tempVP$algo2list[["blocs"]] <- zone_maybe %>%
rowid_to_column("blocsPool") %>%
mutate(blocsPool = floor(blocsPool/gatherblocsPool) + 1)
sizetemp <- max(tempVP$algo2list[["blocs"]]$blocsPool)
# ndomain2(tempVP$zone_maybe)
}else{
zone_maybe <- tibble()
tempVP$algo2list[["blocs"]] <- "too big"
sizetemp <- NA
nVPs <- NA
}
# maybe
# tempVP$zone_maybe
if(nrow(zone_maybe)> 0 ){
zone_maybe <- add_nvp_bloc(zone_maybe)
nVPs <- sum(zone_maybe$temp3)
}else if(!is.na(sizetemp)){
nVPs <- 0
sizetemp <- 0
}
tloop <- difftime(Sys.time(), t0, units = "s")
# Deactivate zoom system if needed
timesaved <- (nVP0s - nVPs) * as.double(taddvp) / 200000
if(is.na(timesaved)){
nextsteptype <- "not_computable"
}else if(tloop < 2 * timesaved ) {
nextsteptype <- "all"
}else{
nextsteptype <- "zoom"
}
# nVPs * as.double(taddvp) / 200000
#   as.double(tloop)
newname <- paste0(c(nextstep$Name, nextstep$todo), collapse = "_")
self$algo2list[[newname]] <- tempVP
self$algo2list$tree  <- self$algo2list$tree %>%
add_row(Name = newname, size =  sizetemp, todo = min(nVPs,1), before = nVP0s, after = nVPs, ratio = nVPs/nVP0s,
time = difftime(Sys.time(), t0, units = "s"), what = nextsteptype
)
self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name] <- self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name] + 1
if(self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name] > self$algo2list$tree$size[self$algo2list$tree$Name == nextstep$Name]){
self$algo2list$tree$todo[self$algo2list$tree$Name == nextstep$Name]  <- 0
}
nextstep <-  self$algo2list[["tree"]] %>%
filter(todo != 0 ) %>%
# filter(what == "all") %>%
filter(!is.na(todo)) %>%
slice(1)
# saveRDS(self, "D:/these/Second_project/QSP/modeling_work/VT_simeoni/algo2.RDS")
#
# nextstep <- self$algo2list[["tree"]] %>%
#   filter(Name == newname)
# self$plot_2D(k2, lambda0)
# print("a")
} # end else
nsave <- nsave + 1
if(file != "" &   nsave == save_every){
cat(silver("Saving..."))
saveRDS(self, file)
nsave <- 0
}
# saveRDS(self, "D:/these/Second_project/QSP/modeling_work/VT_simeoni/algo2.RDS")
} # end while loop
self$algo2list$tree
self$algo2list$tree %>% tail
self$algo2list$tree$time
self$algo2list$tree$time %>% sum
3852 / 3600
