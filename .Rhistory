#
#  allsquares %>%
#   filter(!!parse_expr(filters[2]))
#
#
# ref <- above %>% slice(a)
#
# # allsquares <- allsquares %>%
#   # filter(!!parse_expr(filter_above))
# allsquares %>%
#   filter(k2max <= 0)
#   filter(kemin >=0.6 & Vdmin >=0 & lambda0min >= 0.03 &  lambda1min >= 10 & k2max <= 0 & k1min ==0.5)
filter_above <- filters[1]
# above <- self$filters_neg_above %>% filter(cmt == x)
if(nrow(above) > 0){
for(a in 1:nrow(above)){
ref <- above %>% slice(a)
allsquares <-
allsquares %>%
mutate(above = if_else(!!parse_expr(filter_above), T, above))
}
}
filter_below<- filters[2]
# filters_neg_below <- self$filters_neg_below %>% filter(cmt == x)
if(nrow(below) > 0){
for(a in 1:nrow(below)){
ref <- below %>% slice(a)
allsquares <- allsquares %>%
mutate(below = if_else(!!parse_expr(filter_below), T, below))
}
}
}
final
allsquares
final <- allsquares %>% filter(above & below)
self$zone_sure <- final
self
filters <- self$make_filters(x) %>%
map_chr(~ gsub("line\\$", "", .x))
filters <- paste0("( ", filters, ")")
other <- self$param[! self$param %in% c(self$param_increase[[x]], self$param_reduce[[x]])]
for(a in c(self$param_increase[[x]], other)){
filters[1] <- gsub(paste0(" ",a, " "), paste0(" ", a, "min "), filters[1])
filters[2] <- gsub(paste0(" ",a, " "), paste0(" ", a, "max "), filters[2])
}
for(a in self$param_reduce[[x]]){
filters[1] <- gsub(paste0(" ",a, " "), paste0(" ", a, "max "), filters[1])
filters[2] <- gsub(paste0(" ",a, " "), paste0(" ", a, "min "), filters[2])
}
allsquares <-  allsquares %>%
mutate(above = na_lgl, below = na_lgl)
allsquares
filters <- self$make_filters(x) %>%
map_chr(~ gsub("line\\$", "", .x))
filters <- paste0("( ", filters, ")")
other <- self$param[! self$param %in% c(self$param_increase[[x]], self$param_reduce[[x]])]
for(a in c(self$param_increase[[x]], other)){
filters[1] <- gsub(paste0(" ",a, " "), paste0(" ", a, "min "), filters[1])
filters[2] <- gsub(paste0(" ",a, " "), paste0(" ", a, "max "), filters[2])
}
for(a in self$param_reduce[[x]]){
filters[1] <- gsub(paste0(" ",a, " "), paste0(" ", a, "max "), filters[1])
filters[2] <- gsub(paste0(" ",a, " "), paste0(" ", a, "min "), filters[2])
}
filter_above <- filters[1]
if(nrow(above) > 0){
for(a in 1:nrow(above)){
ref <- above %>% slice(a)
allsquares <-
allsquares %>%
mutate(above = if_else(!!parse_expr(filter_above), T, above))
}
}
allsquares
allsquares %>% distinct(above)
filter_above
x
names(self$param_increase)[[1]]
temp <-  c(above[[x]], below[[x]] )  %>% unique
maxcol <- paste0(x, "max")
mincol <- paste0(x, "min")
if(length(temp) == 1){
df_temp <- tibble(max = temp, min = temp)
}else{
df_temp <-tibble(max =  temp) %>%
# add_row(lambda0max = 0) %>%
# add_row(lambda0max = 1) %>%
arrange(max) %>%
mutate(min = lag(max)) %>%
slice(-1)
}
param_unique <- map(self$param, function(x){
temp <-  c(above[[x]], below[[x]] )  %>% unique
maxcol <- paste0(x, "max")
mincol <- paste0(x, "min")
if(length(temp) == 1){
df_temp <- tibble(max = temp, min = temp)
}else{
df_temp <-tibble(max =  temp) %>%
# add_row(lambda0max = 0) %>%
# add_row(lambda0max = 1) %>%
arrange(max) %>%
mutate(min = lag(max)) %>%
slice(-1)
}
df_temp <- df_temp %>%
select(min, max)
names(df_temp) <- c(maxcol, mincol)
df_temp
})
allsquares <- invoke(.fn = crossing, .args = param_unique )
allsquares <-  allsquares %>%
mutate(above = na_lgl, below = na_lgl)
for(x in names(self$param_increase)[[1]]){
filters <- self$make_filters(x) %>%
map_chr(~ gsub("line\\$", "", .x))
filters <- paste0("( ", filters, ")")
other <- self$param[! self$param %in% c(self$param_increase[[x]], self$param_reduce[[x]])]
for(a in c(self$param_increase[[x]], other)){
filters[1] <- gsub(paste0(" ",a, " "), paste0(" ", a, "min "), filters[1])
filters[2] <- gsub(paste0(" ",a, " "), paste0(" ", a, "max "), filters[2])
}
for(a in self$param_reduce[[x]]){
filters[1] <- gsub(paste0(" ",a, " "), paste0(" ", a, "max "), filters[1])
filters[2] <- gsub(paste0(" ",a, " "), paste0(" ", a, "min "), filters[2])
}
# ref <- above %>% slice(a)
#
#  allsquares %>%
#   filter(!!parse_expr(filters[2]))
#
#
# ref <- above %>% slice(a)
#
# # allsquares <- allsquares %>%
#   # filter(!!parse_expr(filter_above))
# allsquares %>%
#   filter(k2max <= 0)
#   filter(kemin >=0.6 & Vdmin >=0 & lambda0min >= 0.03 &  lambda1min >= 10 & k2max <= 0 & k1min ==0.5)
filter_above <- filters[1]
# above <- self$filters_neg_above %>% filter(cmt == x)
if(nrow(above) > 0){
for(a in 1:nrow(above)){
ref <- above %>% slice(a)
allsquares <-
allsquares %>%
mutate(above = if_else(!!parse_expr(filter_above), T, above))
}
}
filter_below<- filters[2]
# filters_neg_below <- self$filters_neg_below %>% filter(cmt == x)
if(nrow(below) > 0){
for(a in 1:nrow(below)){
ref <- below %>% slice(a)
allsquares <- allsquares %>%
mutate(below = if_else(!!parse_expr(filter_below), T, below))
}
}
}
final <- allsquares %>% filter(above & below)
final
allsquares %>% filter(above & below)
# self$poolVP
filtres <-   self$make_filters()
above <- filter_reduc(df = self$poolVP %>% select(-simul), filtre = filtres[1],
param_increase = self$param_increase$tumVol, param_reduce = self$param_reduce$tumVol, direction = "above")
below <- filter_reduc(df = self$poolVP %>% select(-simul), filtre = filtres[2],
param_increase = self$param_increase$tumVol, param_reduce = self$param_reduce$tumVol, direction = "below")
param_unique <- map(self$param, function(x){
temp <-  c(above[[x]], below[[x]] )  %>% unique
maxcol <- paste0(x, "max")
mincol <- paste0(x, "min")
if(length(temp) == 1){
df_temp <- tibble(max = temp, min = temp)
}else{
df_temp <-tibble(max =  temp) %>%
# add_row(lambda0max = 0) %>%
# add_row(lambda0max = 1) %>%
arrange(max) %>%
mutate(min = lag(max)) %>%
slice(-1)
}
df_temp <- df_temp %>%
select(min, max)
names(df_temp) <- c(maxcol, mincol)
df_temp
})
allsquares <- invoke(.fn = crossing, .args = param_unique )
allsquares <-  allsquares %>%
mutate(above = na_lgl, below = na_lgl)
names(self$param_increase)[[1]]
for(x in names(self$param_increase)[[1]]){
filters <- self$make_filters(x) %>%
map_chr(~ gsub("line\\$", "", .x))
filters <- paste0("( ", filters, ")")
other <- self$param[! self$param %in% c(self$param_increase[[x]], self$param_reduce[[x]])]
for(a in c(self$param_increase[[x]], other)){
filters[1] <- gsub(paste0(" ",a, " "), paste0(" ", a, "min "), filters[1])
filters[2] <- gsub(paste0(" ",a, " "), paste0(" ", a, "max "), filters[2])
}
for(a in self$param_reduce[[x]]){
filters[1] <- gsub(paste0(" ",a, " "), paste0(" ", a, "max "), filters[1])
filters[2] <- gsub(paste0(" ",a, " "), paste0(" ", a, "min "), filters[2])
}
# ref <- above %>% slice(a)
#
#  allsquares %>%
#   filter(!!parse_expr(filters[2]))
#
#
# ref <- above %>% slice(a)
#
# # allsquares <- allsquares %>%
#   # filter(!!parse_expr(filter_above))
# allsquares %>%
#   filter(k2max <= 0)
#   filter(kemin >=0.6 & Vdmin >=0 & lambda0min >= 0.03 &  lambda1min >= 10 & k2max <= 0 & k1min ==0.5)
filter_above <- filters[1]
# above <- self$filters_neg_above %>% filter(cmt == x)
if(nrow(above) > 0){
for(a in 1:nrow(above)){
ref <- above %>% slice(a)
allsquares <-
allsquares %>%
mutate(above = if_else(!!parse_expr(filter_above), T, above))
}
}
filter_below<- filters[2]
# filters_neg_below <- self$filters_neg_below %>% filter(cmt == x)
if(nrow(below) > 0){
for(a in 1:nrow(below)){
ref <- below %>% slice(a)
allsquares <- allsquares %>%
mutate(below = if_else(!!parse_expr(filter_below), T, below))
}
}
}
final <- allsquares %>% filter(above & below)
final
# self$poolVP
filtres <-   self$make_filters()
above <- filter_reduc(df = self$poolVP %>% select(-simul), filtre = filtres[1],
param_increase = self$param_increase$tumVol, param_reduce = self$param_reduce$tumVol, direction = "above")
below <- filter_reduc(df = self$poolVP %>% select(-simul), filtre = filtres[2],
param_increase = self$param_increase$tumVol, param_reduce = self$param_reduce$tumVol, direction = "below")
param_unique <- map(self$param, function(x){
temp <-  c(above[[x]], below[[x]] )  %>% unique
maxcol <- paste0(x, "max")
mincol <- paste0(x, "min")
if(length(temp) == 1){
df_temp <- tibble(max = temp, min = temp)
}else{
df_temp <-tibble(max =  temp) %>%
# add_row(lambda0max = 0) %>%
# add_row(lambda0max = 1) %>%
arrange(max) %>%
mutate(min = lag(max)) %>%
slice(-1)
}
df_temp <- df_temp %>%
select(min, max)
names(df_temp) <- c(mincol, maxcol)
df_temp
})
allsquares <- invoke(.fn = crossing, .args = param_unique )
allsquares <-  allsquares %>%
mutate(above = na_lgl, below = na_lgl)
allsquares
allsquares <- invoke(.fn = crossing, .args = param_unique )
allsquares <-  allsquares %>%
mutate(above = na_lgl, below = na_lgl)
for(x in names(self$param_increase)[[1]]){
filters <- self$make_filters(x) %>%
map_chr(~ gsub("line\\$", "", .x))
filters <- paste0("( ", filters, ")")
other <- self$param[! self$param %in% c(self$param_increase[[x]], self$param_reduce[[x]])]
for(a in c(self$param_increase[[x]], other)){
filters[1] <- gsub(paste0(" ",a, " "), paste0(" ", a, "min "), filters[1])
filters[2] <- gsub(paste0(" ",a, " "), paste0(" ", a, "max "), filters[2])
}
for(a in self$param_reduce[[x]]){
filters[1] <- gsub(paste0(" ",a, " "), paste0(" ", a, "max "), filters[1])
filters[2] <- gsub(paste0(" ",a, " "), paste0(" ", a, "min "), filters[2])
}
# ref <- above %>% slice(a)
#
#  allsquares %>%
#   filter(!!parse_expr(filters[2]))
#
#
# ref <- above %>% slice(a)
#
# # allsquares <- allsquares %>%
#   # filter(!!parse_expr(filter_above))
# allsquares %>%
#   filter(k2max <= 0)
#   filter(kemin >=0.6 & Vdmin >=0 & lambda0min >= 0.03 &  lambda1min >= 10 & k2max <= 0 & k1min ==0.5)
filter_above <- filters[1]
# above <- self$filters_neg_above %>% filter(cmt == x)
if(nrow(above) > 0){
for(a in 1:nrow(above)){
ref <- above %>% slice(a)
allsquares <-
allsquares %>%
mutate(above = if_else(!!parse_expr(filter_above), T, above))
}
}
filter_below<- filters[2]
# filters_neg_below <- self$filters_neg_below %>% filter(cmt == x)
if(nrow(below) > 0){
for(a in 1:nrow(below)){
ref <- below %>% slice(a)
allsquares <- allsquares %>%
mutate(below = if_else(!!parse_expr(filter_below), T, below))
}
}
}
final <- allsquares %>% filter(above & below)
final
library(peccary)
library(QSPVP)
library(RxODE)
library(progress)
library(R6)
library(crayon)
library(profvis)
library(microbenchmark)
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new()
# self$set_targets(filter = Dose == 50 & cmt == "tumVol", ntime = 8)
self$set_targets(filter = Dose == 50 & cmt == "tumVol",timeforce = c(12,19, 30,45))
# self$set_targets(filter = Dose == 50 & cmt == "tumVol", ntime = 8)
self$set_targets(filter =  cmt == "tumVol",timeforce = c(12,19, 30,45))
VP_df <- crossing(k1 = c(0.5),
k2 = seq(0,8,0.1),
ke = seq(0.6,1.4,0.4),
lambda0 =seq(0,0.16,0.03),
lambda1 = c(10,12,14,33),
Vd =  c(0:40)) %>% #c(0.8,1,1.2)) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
t0 <- Sys.time()
self$add_VP(VP_df, fillatend = F, reducefilteratend = F,use_green_filter = F, npersalve = 2000, time_compteur = F, pctActivGreen = 0.75)
Sys.time() - t0
self$plot_VP(nmax = 2000)
self$n_filter_reduc()
self
self$compute_zone_maybe()
self$compute_zone_sure()
self$zone_maybe
self$zone_sure
# self$poolVP
filtres <-   self$make_filters()
above <- filter_reduc(df = self$poolVP %>% select(-simul), filtre = filtres[1],
param_increase = self$param_increase$tumVol, param_reduce = self$param_reduce$tumVol, direction = "above")
below <- filter_reduc(df = self$poolVP %>% select(-simul), filtre = filtres[2],
param_increase = self$param_increase$tumVol, param_reduce = self$param_reduce$tumVol, direction = "below")
param_unique <- map(self$param, function(x){
temp <-  c(above[[x]], below[[x]] )  %>% unique
maxcol <- paste0(x, "max")
mincol <- paste0(x, "min")
if(length(temp) == 1){
df_temp <- tibble(max = temp, min = temp)
}else{
df_temp <-tibble(max =  temp) %>%
# add_row(lambda0max = 0) %>%
# add_row(lambda0max = 1) %>%
arrange(max) %>%
mutate(min = lag(max)) %>%
slice(-1)
}
df_temp <- df_temp %>%
select(min, max)
names(df_temp) <- c(mincol, maxcol)
df_temp
})
allsquares <- invoke(.fn = crossing, .args = param_unique )
allsquares
allsquares <-  allsquares %>%
mutate(above = na_lgl, below = na_lgl)
names(self$param_increase)[[1]]
x
x = "tumVol"
filters <- self$make_filters(x) %>%
map_chr(~ gsub("line\\$", "", .x))
filters <- paste0("( ", filters, ")")
other <- self$param[! self$param %in% c(self$param_increase[[x]], self$param_reduce[[x]])]
for(a in c(self$param_increase[[x]], other)){
filters[1] <- gsub(paste0(" ",a, " "), paste0(" ", a, "min "), filters[1])
filters[2] <- gsub(paste0(" ",a, " "), paste0(" ", a, "max "), filters[2])
}
for(a in self$param_reduce[[x]]){
filters[1] <- gsub(paste0(" ",a, " "), paste0(" ", a, "max "), filters[1])
filters[2] <- gsub(paste0(" ",a, " "), paste0(" ", a, "min "), filters[2])
}
filter_above <- filters[1]
if(nrow(above) > 0){
for(a in 1:nrow(above)){
ref <- above %>% slice(a)
allsquares <-
allsquares %>%
mutate(above = if_else(!!parse_expr(filter_above), T, above))
}
}
allsquares
allsquares %>% filter(!is.na(above))
filter_below<- filters[2]
# filters_neg_below <- self$filters_neg_below %>% filter(cmt == x)
if(nrow(below) > 0){
for(a in 1:nrow(below)){
ref <- below %>% slice(a)
allsquares <- allsquares %>%
mutate(below = if_else(!!parse_expr(filter_below), T, below))
}
}
allsquares %>% filter(!is.na(above))
allsquares %>% filter(above)
allsquares %>% filter(above & below)
allsquares %>% filter(below)
below
above
nrow(below)
a = 1
ref <- below %>% slice(a)
ref
filter_above
filter_below
allsquares %>%
filter(k1min == 0.5)
allsquares %>%
filter(k1min == 0.5 & above)
allsquares %>%
filter(k1min == 0.5 & above & K2min >= 0.7)
allsquares
allsquares %>%
filter(k1min == 0.5 & above & k2min >= 0.7)
test
re
ref
filter_below
allsquares %>%
filter(k1min == 0.5 & above & k2min >= 0.7 &  kemax <= 1.4)
allsquares %>%
filter(k1min == 0.5 & above & k2min >= 0.7 &  kemax <= 1.4 & Vdmax <= 40)
allsquares %>%
filter(k1min == 0.5 & above & k2min >= 0.7 &  kemax <= 1.4 & Vdmax <= 40 & lambda0max <=  0.09)
allsquares %>%
filter(k1min == 0.5 & above & k2min >= 0.7 &  kemax <= 1.4 & Vdmax <= 40 & lambda0max <=  0.09 &  lambda1max <= 10)
allsquares %>%
filter(k1min == 0.5 & above & k2min >= 0.7 &  kemax <= 1.4 & Vdmax <= 40 & lambda0max <=  0.09)
ref
ref
filter_below<- filters[2]
# filters_neg_below <- self$filters_neg_below %>% filter(cmt == x)
if(nrow(below) > 0){
for(a in 1:nrow(below)){
ref <- below %>% slice(a)
allsquares <- allsquares %>%
mutate(below = if_else(!!parse_expr(filter_below), T, below))
}
}
allsquares
allsquares %>% filter(below)
below <- self$poolVP %>% select(-simul)
# filters_neg_below <- self$filters_neg_below %>% filter(cmt == x)
if(nrow(below) > 0){
for(a in 1:nrow(below)){
ref <- below %>% slice(a)
allsquares <- allsquares %>%
mutate(below = if_else(!!parse_expr(filter_below), T, below))
}
}
allsquares
allsquares %>% filter(below)
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new()
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new()
# self$set_targets(filter = Dose == 50 & cmt == "tumVol", ntime = 8)
self$set_targets(filter = Dose == 50 & cmt == "tumVol",timeforce = c(12,19, 30,45))
VP_df <- crossing(k1 = c(0.5),
k2 = seq(0,8,0.1),
ke = seq(0.6,1.4,0.4),
lambda0 =seq(0,0.16,0.03),
lambda1 = c(10,12,14,33),
Vd =  c(0:40)) %>% #c(0.8,1,1.2)) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
t0 <- Sys.time()
self$add_VP(VP_df, fillatend = F, reducefilteratend = F,use_green_filter = F, npersalve = 2000, time_compteur = F, pctActivGreen = 0.75)
Sys.time() - t0
self$plot_VP(nmax = 2000)
self$n_filter_reduc()
self$compute_zone_maybe()
self$compute_zone_sure()
self$zone_sure
wordcountaddin:::text_stats()
18 <: 340
18/340
nmol_ml <- 0.0529
18/340
52/ 0.05
52/ 0.052
18/340
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
