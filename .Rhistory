reject <- paste0("which(", line_compar,")")
# Then replace "==" by "<=" for death parameters
for(a in pa_re_temp){
reject <- gsub(paste0(a, " *=="), paste0(a, " >= "), reject)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
# Then replace "==" by ">=" for survival parameters
for(a in pa_in_temp){
reject <- gsub(paste0(a, " *=="), paste0(a, " <= "), reject)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
for(a in pa_ni_temp){
reject <-
gsub(paste0("&? * celltheque\\$", a, " *== *line\\$",a),"", reject)
}
reject <- gsub("line\\$protocols",  paste0("\"", line$protocols,"\""), reject)
# Compute the test
reject_eval <- eval(parse_expr(reject))
cellidtorem <- celltheque[reject_eval, "cellid"]$cellid
celltheque <- celltheque %>%
filter(!cellid %in%cellidtorem)
print(paste0(length(cellidtorem), " cells removed"))
if(time_compteur == T) celltheque_compteur_new <- celltheque_compteur_new %>%
mutate(nelim = length(cellidtorem))
} # end if-else
if(saveFilter == T) saveFilterDf <-saveFilterDf  %>%
add_row(filter = also_dead_line)
# Now update the lines
if(ab_low == TRUE &   paste0(cmtt, "_AL") %in% currentlyna$key){
# create a copy of the line_compar with everything "=="
test_above_lower_lim <- paste0(line_compar, "& is.na(celltheque$",    paste0(cmtt, "_AL"),")")
test_above_lower_lim <- paste0("which(", test_above_lower_lim,")")
for(a in pa_re_temp){
test_above_lower_lim <- gsub(paste0(a, " *=="), paste0(a, " <= "), test_above_lower_lim)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
for(a in pa_in_temp){
test_above_lower_lim <- gsub(paste0(a, " *=="), paste0(a, " >= "), test_above_lower_lim)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
for(a in pa_ni_temp){
test_above_lower_lim  <-
gsub(paste0("&? * celltheque\\$", a, " *== *line\\$",a),"", test_above_lower_lim)
}
whichaboveloweer <- eval(parse_expr(test_above_lower_lim))
# celltheque %>%
#   slice(whichaboveloweer) %>%
#   filter(is.na(tumVol_AL)) %>% distinct(protocols)
celltheque[[paste0(cmtt, "_AL")]][whichaboveloweer]  <- TRUE
if(time_compteur == T) celltheque_compteur_new <- celltheque_compteur_new %>%
mutate( ninfo = if_else(is.na(celltheque_compteur_new$ninfo),0,celltheque_compteur_new$ninfo)+  length(whichaboveloweer))
# celltheque %>% slice(whichaboveloweer) %>% filter(is.na(tumVol_AL))
} # end if ab_low == T
if(be_up == TRUE &  paste0(cmtt, "_BU") %in% currentlyna$key){
# create a copy of the line_compar with everything "=="
test_below_upper_lim <- paste0(line_compar, "& is.na(celltheque$",    paste0(cmtt, "_BU"),")")
test_below_upper_lim <- paste0("which(", test_below_upper_lim,")")
# Then replace "==" by "<=" for death parameters
for(a in pa_re_temp){
test_below_upper_lim <- gsub(paste0(a, " *=="), paste0(a, " >= "), test_below_upper_lim)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
# Then replace "==" by ">=" for survival parameters
for(a in pa_in_temp){
test_below_upper_lim <- gsub(paste0(a, " *=="), paste0(a, " <= "), test_below_upper_lim)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
for(a in pa_ni_temp){
test_below_upper_lim  <-
gsub(paste0("&? * celltheque\\$", a, " *== *line\\$",a),"", test_below_upper_lim)
}
whichbelowupper <- eval(parse_expr(test_below_upper_lim))
# celltheque %>%
#   slice(whichbelowupper) %>%
#   filter(is.na(tumVol_BU))
celltheque[[paste0(cmtt, "_BU")]][whichbelowupper]  <- TRUE
if(time_compteur == T) celltheque_compteur_new <- celltheque_compteur_new %>%
mutate( ninfo = if_else(is.na(celltheque_compteur_new$ninfo),0,celltheque_compteur_new$ninfo)+  length(whichbelowupper))
} # end if be_up == T
}# end for each compartment
# print(line)
#       print(celltheque %>%
#         group_by(cellid) %>%
#         tally %>%
#         filter(n != 3))
print( is.na(celltheque[, col_to_add]) %>% sum)
print(Sys.time() - t0)
print(Sys.time() - t00)
if(time_compteur == T)  celltheque_compteur <- bind_rows(celltheque_compteur,celltheque_compteur_new %>%
mutate(time = as.double(difftime(Sys.time(), t0, units = "sec"))))
nn <- nn +1
print(nn)
}# fin while 1
# Just print some stuff
# nnewlines <- sum(!is.na(celltheque$res)) - before
# print( paste0(nnewlines,  " new lines proceeded"))
# print(Sys.time() - t0)
# print(Sys.time() - t00)
print("here")
print("#####################################################")
indexdone <- which(is.na(celltheque[, col_to_add]) %>% apply(1, sum) == 0 )
cellthequeDone <- bind_rows(cellthequeDone, celltheque %>% slice(indexdone))
celltheque <- celltheque %>% slice(-indexdone)
## Allow to have intermediate save, usefull when we
# pctdone <- (length(celltheque$rowid[!is.na(celltheque$res)]) +  nrow(cellthequeDone)) / ntotal
# print(paste0("Percentage done: ", round(pctdone * 100, 3), "%"))
# nn <- nn +1
# print(nn)
}#fin while 2
## Here happen after nsave iteration
# print("########################### SAVNG RDS #############################")
if(time_compteur == T)  celltheque_compteur <<- celltheque_compteur
return(cellthequeDone)
# # Recompute the whole celltheque
# celltheque <- bind_rows(celltheque, cellthequeDone)
# cellthequeDone <- celltheque %>% slice(0)
# # Save it
# saveRDS(object = celltheque, file = file)
# Start new session
}
celltheque2 <- celltheque_produc(file.name = "test_1.RDS", toadd = toadd, saven = Inf, time_compteur = T) # the celltheque production function!
celltheque2
celltheque %>%
# filter(protocols == "dose50") %>%
# slice(1:200) %>%
rename(protocol = protocols) %>%
# filter(cellid %in% c( 1)) %>%
# filter(cellid %in% 300:600) %>%
mutate(simul = map(rowid, function(x){
print(x)
celltheque %>%
filter(rowid == x) -> param
add_events <- protocols[[param$protocols]]
simulations(param, add_events)
})) %>%
unnest() -> dataverif
celltheque2 %>%
# filter(protocols == "dose50") %>%
# slice(1:200) %>%
rename(protocol = protocols) %>%
# filter(cellid %in% c( 1)) %>%
# filter(cellid %in% 300:600) %>%
mutate(simul = map(rowid, function(x){
print(x)
celltheque %>%
filter(rowid == x) -> param
add_events <- protocols[[param$protocols]]
simulations(param, add_events)
})) %>%
unnest() -> dataverif
dataverif %>%
gather("cmt", "value",tumVol, Conc) %>%
ggplot()+
geom_line(aes(time, value, group = cellid))+
facet_wrap(protocol~cmt, scales = "free")+
scale_y_log10()+
geom_segment(data = targets %>%
filter(protocols %in% unique(celltheque$protocols) ) %>%
rename(protocol = protocols),
aes(x = time, xend = time, y = min, yend = max), col ="red", size = 2)
celltheque2
dataverif
dataverif %>%
filter(time == 25)
filter(time == 25 & protocol == "dose50")
dataverif %>%  filter( protocol == "dose50" )
dataverif %>%  filter( protocol == "dose50"  & time == 25)
dataverif %>%  filter( protocol == "dose50"  & time == 22)
dataverif %>%  filter( protocol == "dose50"  & time == 21)
dataverif %>%  filter( protocol == "dose50"  & time == 16)
# Sample one rows among the not done yet
filter =  which(is.na(celltheque[, col_to_add]) %>% apply(1, sum) != 0 )
filter
celltheque
filter
celltheque %>%
slice(filter)
celltheque %>%
slice(filter) %>%
filter(protocols=="dose50")
celltheque %>%
slice(filter) %>%
filter(protocols=="dose50") %>%
sample(1)
celltheque %>%
slice(filter) %>%
filter(protocols=="dose50")
celltheque %>%
slice(filter) %>%
filter(protocols=="dose50") %>%
slice(1)
celltheque %>%
slice(filter) %>%
filter(protocols=="dose50") -> temp
temp
sample(1:nrow(temp), size = 1)
nrow(temp),
celltheque_produc  <- function(file.name = "first_try.RDS", toadd = NULL, saven = 50, drug = NULL, update_at_end = T, time_compteur = F, saveFilter  = F){
# Compute the path of where the celltheque file will be
file <- file.path(active_VT_project, "2_celltheques","celltheques", file.name)
# Create the celltheque
celltheque <-  toadd %>%
group_by(!!!parse_exprs(names(toadd)[names(toadd) != "protocols"])) %>%
nest() %>%
rowid_to_column("cellid") %>%
unnest() %>%
rowid_to_column("rowid") %>%
ungroup()
# Add the columns for each output
targets %>%
filter(protocols %in% unique(celltheque$protocols)) %>%
pull(cmt) %>%
unique -> col_to_add
col_to_add <- c(paste0(col_to_add, "_BU"),
paste0(col_to_add, "_AL"))
for(a in col_to_add) celltheque[a] <- NA
### eviter les loupes infinis si un protocole n'as pas d'observion..
crossing(protocols = unique(toadd$protocols), cmt =  targets %>%
filter(protocols %in% unique(celltheque$protocols)) %>%
pull(cmt) %>%
unique) %>%
full_join(targets) %>%
filter(is.na(time)) -> torem
if(nrow(torem)>0){
for(a in 1:nrow(torem)){
cmt_to_rm <- torem$cmt[[a]]
pro <- torem$protocols[[a]]
celltheque[[paste0(cmt_to_rm,"_BU")]][celltheque$protocols == pro] <- FALSE
celltheque[[paste0(cmt_to_rm,"_AL")]][celltheque$protocols == pro] <- FALSE
}
}
# test filterDf system
#
#   filterdf <- readRDS("D:/these/Second_project/QSP/modeling_work/Lind_eq_VTpckg/saveFilterDf.RDS")
#
# celltheque$res <- NULL
# for(a in 154:nrow(filterdf)){
#   b <- Sys.time()
#
# filter <- filterdf$filter[[a]]
# result <- filterdf$res[[a]]
#
# filter <- gsub("(line\\$BAK0)|(line\\$BAXc0)", "1000", filter) %>%
#   gsub(pattern = " \\& celltheque\\$group== line\\$group", replacement = "")
#
# nrow <- eval(parse_expr(filter))
# celltheque[nrow, "res"] <- result
#
# print(paste0(a, ":", length(nrow),":", difftime(Sys.time(), b)))
#
#
# }
#
# Handling death and survival agents, to greatly accelerate the process
all_param <- names(celltheque)
all_param <- all_param[! all_param %in% c("cellid", "rowid",col_to_add)]
line_compar <-   paste0("celltheque$", all_param, " == line$", all_param) %>%
paste0(collapse = " & ")
# line_compar <- paste0("which(", line_compar,")")
# saveRDS(object = celltheque, file = gsub("\\.RDS", "_todetermine.RDS", file))
# Time compteur
if(time_compteur == T){
celltheque_compteur <- tibble(n = NA, time  = NA, nelim =NA, ninfo =NA_real_, computmodel = NA)
n_compteur <- 0
}
if(saveFilter == T) saveFilterDf <- tibble(time = double(),  filter = character(), res = logical())
# just in case we never enter into the loop (if already filled, almost always useless)
ntotal <- nrow(celltheque)
t00 <- Sys.time()
# begining while ----------------------------------------------------------
# cellthequeprev <-celltheque
# celltheque <- cellthequeprev
cellthequeDone <- celltheque %>% slice(0)
while(is.na(celltheque[, col_to_add]) %>% sum > 0 ){
nn <- 0
# ndone <- nrow(celltheque %>% filter(!is.na(res)))
# print(ndone)
# To gain time, we remove in the celltheque the line already done
# celltheque <- celltheque  %>%slice(-indexdone)
## Allow to have intermediate save, usefull when we let computer run all night
## If the server crashes, we don't loose everything...
# begining while 2----------------------------------------------------------
while(is.na(celltheque[, col_to_add]) %>% sum > 0& nn < saven){
if(time_compteur == T){
n_compteur <- n_compteur + 1
celltheque_compteur_new <- celltheque_compteur %>%
slice(1) %>%
mutate(n = n_compteur)
}
# Just compute some stat...
t0 <- Sys.time()
# Sample one rows among the not done yet
filter =  which(is.na(celltheque[, col_to_add]) %>% apply(1, sum) != 0 )
celltheque %>%
slice(filter) %>%
filter(protocols=="dose50") -> temp
if(nrow(temp) > 0){
line <- temp %>% slice(sample(1:nrow(temp), size = 1))
}else{
n <- sample(x =c(filter,filter), size = 1);n
# and extract the line to be tested !
line <- celltheque %>%
slice(n);line
}
# Now we need to handle the administrations
# by making a temporar copy
protocol  <- protocols[[line$protocols]]
# add_events_line$amt[is.na(add_events_line$amt )] <- 0
# And now we can make the simulation and extract the result !
b <- Sys.time()
res <- simulations(ind_param = line, add_events = protocol, returnSim = T);res
if(time_compteur == T) celltheque_compteur_new <- celltheque_compteur_new %>%
mutate(computmodel = as.double(difftime(Sys.time(),b, units = "sec")))
# Add the columns for each output
targets_temp <- targets %>%
filter(protocols %in% line$protocols)
# Now let's see if we can extrapolate some other results
# cmtt <- "tumVol"
# cmtt <- "Conc"
cmt_to_update <- unique(targets_temp$cmt)
line %>%
gather("key", "value") %>%
filter(is.na(value)) -> currentlyna
cmt_to_update <- cmt_to_update[cmt_to_update %in% gsub("(_AL$)|(_BU$)", "", currentlyna$key)]
for(cmtt in cmt_to_update){
targets_temp2 <- targets_temp %>%
filter(cmt == cmtt)
# below upper?
res %>%
filter(time %in% targets_temp2$time) %>%
pull(!!parse_expr(cmtt)) -> values
be_up <- if_else(min(values <= targets_temp2$max) == 0, F, T);be_up
ab_low <-  if_else(min(values >= targets_temp2$min) == 0, F, T);ab_low
pa_in_temp <- param_increase[[cmtt]]
pa_in_temp <- pa_in_temp[pa_in_temp %in% all_param]
pa_re_temp <- param_reduce[[cmtt]]
pa_re_temp <- pa_re_temp[pa_re_temp %in% all_param]
pa_ni_temp <- param_no_impact[[cmtt]]
pa_ni_temp <- pa_ni_temp[pa_ni_temp %in% all_param]
# if the line output is death
if(be_up == F){
# create a copy of the line_compar with everything "=="
reject <- paste0("which(", line_compar,")")
# Then replace "==" by "<=" for survival parameters
for(a in pa_in_temp){
reject <- gsub(paste0(a, " *=="), paste0(a, " >= "), reject)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
# Then replace "==" by ">=" for survival parameters
for(a in pa_re_temp){
reject <- gsub(paste0(a, " *=="), paste0(a, " <= "), reject)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
for(a in pa_ni_temp){
reject <-
gsub(paste0("&? * celltheque\\$", a, " *== *line\\$",a),"", reject)
}
reject <- gsub("line\\$protocols",  paste0("\"", line$protocols,"\""), reject)
# Compute the test
reject_eval <- eval(parse_expr(reject))
cellidtorem <- celltheque[reject_eval, "cellid"]$cellid
celltheque <- celltheque %>%
filter(!cellid %in%cellidtorem)
print(paste0(length(cellidtorem), " cells removed"))
if(time_compteur == T) celltheque_compteur_new <- celltheque_compteur_new %>%
mutate(nelim = length(cellidtorem))
### if the line output is survival
}else if(ab_low == F){
# create a copy of the line_compar with everything "=="
# reject <- paste0(line_compar, "& is.na(celltheque$",    paste0(cmtt, "_AL"),")")
reject <- paste0("which(", line_compar,")")
# Then replace "==" by "<=" for death parameters
for(a in pa_re_temp){
reject <- gsub(paste0(a, " *=="), paste0(a, " >= "), reject)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
# Then replace "==" by ">=" for survival parameters
for(a in pa_in_temp){
reject <- gsub(paste0(a, " *=="), paste0(a, " <= "), reject)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
for(a in pa_ni_temp){
reject <-
gsub(paste0("&? * celltheque\\$", a, " *== *line\\$",a),"", reject)
}
reject <- gsub("line\\$protocols",  paste0("\"", line$protocols,"\""), reject)
# Compute the test
reject_eval <- eval(parse_expr(reject))
cellidtorem <- celltheque[reject_eval, "cellid"]$cellid
celltheque <- celltheque %>%
filter(!cellid %in%cellidtorem)
print(paste0(length(cellidtorem), " cells removed"))
if(time_compteur == T) celltheque_compteur_new <- celltheque_compteur_new %>%
mutate(nelim = length(cellidtorem))
} # end if-else
if(saveFilter == T) saveFilterDf <-saveFilterDf  %>%
add_row(filter = also_dead_line)
# Now update the lines
if(ab_low == TRUE &   paste0(cmtt, "_AL") %in% currentlyna$key){
# create a copy of the line_compar with everything "=="
test_above_lower_lim <- paste0(line_compar, "& is.na(celltheque$",    paste0(cmtt, "_AL"),")")
test_above_lower_lim <- paste0("which(", test_above_lower_lim,")")
for(a in pa_re_temp){
test_above_lower_lim <- gsub(paste0(a, " *=="), paste0(a, " <= "), test_above_lower_lim)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
for(a in pa_in_temp){
test_above_lower_lim <- gsub(paste0(a, " *=="), paste0(a, " >= "), test_above_lower_lim)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
for(a in pa_ni_temp){
test_above_lower_lim  <-
gsub(paste0("&? * celltheque\\$", a, " *== *line\\$",a),"", test_above_lower_lim)
}
whichaboveloweer <- eval(parse_expr(test_above_lower_lim))
# celltheque %>%
#   slice(whichaboveloweer) %>%
#   filter(is.na(tumVol_AL)) %>% distinct(protocols)
celltheque[[paste0(cmtt, "_AL")]][whichaboveloweer]  <- TRUE
if(time_compteur == T) celltheque_compteur_new <- celltheque_compteur_new %>%
mutate( ninfo = if_else(is.na(celltheque_compteur_new$ninfo),0,celltheque_compteur_new$ninfo)+  length(whichaboveloweer))
# celltheque %>% slice(whichaboveloweer) %>% filter(is.na(tumVol_AL))
} # end if ab_low == T
if(be_up == TRUE &  paste0(cmtt, "_BU") %in% currentlyna$key){
# create a copy of the line_compar with everything "=="
test_below_upper_lim <- paste0(line_compar, "& is.na(celltheque$",    paste0(cmtt, "_BU"),")")
test_below_upper_lim <- paste0("which(", test_below_upper_lim,")")
# Then replace "==" by "<=" for death parameters
for(a in pa_re_temp){
test_below_upper_lim <- gsub(paste0(a, " *=="), paste0(a, " >= "), test_below_upper_lim)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
# Then replace "==" by ">=" for survival parameters
for(a in pa_in_temp){
test_below_upper_lim <- gsub(paste0(a, " *=="), paste0(a, " <= "), test_below_upper_lim)%>%
gsub(pattern = paste0("line\\$", a), replacement = line[[a]])
}
for(a in pa_ni_temp){
test_below_upper_lim  <-
gsub(paste0("&? * celltheque\\$", a, " *== *line\\$",a),"", test_below_upper_lim)
}
whichbelowupper <- eval(parse_expr(test_below_upper_lim))
# celltheque %>%
#   slice(whichbelowupper) %>%
#   filter(is.na(tumVol_BU))
celltheque[[paste0(cmtt, "_BU")]][whichbelowupper]  <- TRUE
if(time_compteur == T) celltheque_compteur_new <- celltheque_compteur_new %>%
mutate( ninfo = if_else(is.na(celltheque_compteur_new$ninfo),0,celltheque_compteur_new$ninfo)+  length(whichbelowupper))
} # end if be_up == T
}# end for each compartment
# print(line)
#       print(celltheque %>%
#         group_by(cellid) %>%
#         tally %>%
#         filter(n != 3))
print( is.na(celltheque[, col_to_add]) %>% sum)
print(Sys.time() - t0)
print(Sys.time() - t00)
if(time_compteur == T)  celltheque_compteur <- bind_rows(celltheque_compteur,celltheque_compteur_new %>%
mutate(time = as.double(difftime(Sys.time(), t0, units = "sec"))))
nn <- nn +1
print(nn)
}# fin while 1
# Just print some stuff
# nnewlines <- sum(!is.na(celltheque$res)) - before
# print( paste0(nnewlines,  " new lines proceeded"))
# print(Sys.time() - t0)
# print(Sys.time() - t00)
print("here")
print("#####################################################")
indexdone <- which(is.na(celltheque[, col_to_add]) %>% apply(1, sum) == 0 )
cellthequeDone <- bind_rows(cellthequeDone, celltheque %>% slice(indexdone))
celltheque <- celltheque %>% slice(-indexdone)
## Allow to have intermediate save, usefull when we
# pctdone <- (length(celltheque$rowid[!is.na(celltheque$res)]) +  nrow(cellthequeDone)) / ntotal
# print(paste0("Percentage done: ", round(pctdone * 100, 3), "%"))
# nn <- nn +1
# print(nn)
}#fin while 2
## Here happen after nsave iteration
# print("########################### SAVNG RDS #############################")
if(time_compteur == T)  celltheque_compteur <<- celltheque_compteur
return(cellthequeDone)
# # Recompute the whole celltheque
# celltheque <- bind_rows(celltheque, cellthequeDone)
# cellthequeDone <- celltheque %>% slice(0)
# # Save it
# saveRDS(object = celltheque, file = file)
# Start new session
}
# Step3: create celltheque
toadd <- crossing(k1 = 0.5 *  1,
k2 = 0.5 *  seq(0.75,4,0.25),
ke = 1 *  seq(0.6,1.4,0.2),
lambda0 = 0.04 *  seq(0.25,2,0.25),
lambda1 = 6 *   seq(0.25,2,0.25),
Vd =  40  * c(0.1,1,10),
protocols = c("dose0", "dose50", "dose100")) %>% #c(0.8,1,1.2)) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )# what you want to add in your celltheque as individuals
targets <-  tribble(~protocols, ~time, ~cmt, ~ min, ~max,
"dose0",10,"tumVol", 50, 120,
"dose0",25,"tumVol", 70,220,
"dose0",0,"Conc",0,1,
"dose50",10,"tumVol", 40,125,
"dose50",25,"tumVol", 50,51,
"dose50",10,"Conc", 1e-6,1,
"dose100",25,"tumVol", 3,167)
celltheque2 <- celltheque_produc(file.name = "test_1.RDS", toadd = toadd, saven = Inf, time_compteur = T) # the celltheque production function!
library(QSPVP)
