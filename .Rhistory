time_simulations <- Sys.time()
b <- Sys.time()
res <- simulations2(ind_param = line, add_events = protocol, returnSim = T,
icmt = self$initial_cmt_values, time_vec =self$times,
pardf = self$parameters_default_values, model = self$model)#;res
res <- as.tibble(res)
time_simulations <-  difftime(Sys.time(), b, units = "s")
n_simulations <-  nrow(line)
if(time_compteur == T){
poolVP_compteur_new$timemodel <- time_simulations
poolVP_compteur_new$nsimul <- n_simulations
}
remv <- F
cellidtorem <- double()
if(time_compteur == T) t02 <- Sys.time()
# # get targets for this patients
targets_temp <- self$targets %>%
filter(protocol == unique(line$protocol))#%>%
res2 <- res %>%
gather("cmt", "value", unique(targets_temp$cmt)) %>%
filter(time %in% targets_temp$time) %>%
left_join( targets_temp, by = c("time", "cmt")) %>%
filter(!is.na(min)) %>%
mutate(be_up = value <= max) %>%
mutate(ab_low = value >= min)
##### Remove patients neg  and compute red filters if activated ########
# lines output neg_ below
if(time_compteur == T) t02 <- Sys.time()
t0filternegbelow <- Sys.time()
res2 %>%
filter(ab_low == 0) %>%
group_by(id, cmt) %>%
slice(1) %>% ungroup() -> idsbelow
filters_neg_below <- idsbelow %>%
left_join(line,by = c("id", "protocol")) %>%
select(!!!parse_exprs(all_param), "cmt","cellid")
filters_neg_below
filters_neg_below <- idsbelow %>%
left_join(line,by = c("id", "protocol")) %>%
select(!!!parse_exprs(all_param), "cmt","cellid")
if(nrow(filters_neg_below) > 0){
filters_neg_below_up_reduc <- filter_reduc(filters_neg_below ,obj = self, direction = "below")
#%>%
# arrange(k2, desc(lambda0))
}else{
filters_neg_below_up_reduc <- filters_neg_below
}
filters_neg_below_up_reduc
self
self$filters_neg_above
self$param_increase
self$param_reduce
filters_neg_below_up_reduc
if(time_compteur == T){
poolVP_compteur_new$filter_neg_below <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new$nfilter_negbel_bef <- nrow(filters_neg_below)
poolVP_compteur_new$nfilters_negbel_af <- nrow(filters_neg_below_up_reduc)
}
timefilternegbelowmake <- difftime(Sys.time(),t0filternegbelow , units = "s")
# lines output neg_ above
if(time_compteur == T) t02 <- Sys.time()
t0filternegabovemake <- Sys.time()
res2 %>%
filter(be_up == 0) %>%
group_by(id, cmt) %>%
slice(1) %>% ungroup() ->idsabove
filters_neg_above <-  idsabove %>%
left_join(line,by = c("id", "protocol")) %>%
select(!!!parse_exprs(all_param), "cmt" , "cellid")
if(nrow(filters_neg_above) > 0){
filters_neg_above_reduc <- filter_reduc(filters_neg_above ,obj = self, direction =  "above")
# %>%
# arrange(desc(k2))
}else{
filters_neg_above_reduc <- filters_neg_above
}
if(time_compteur == T){
poolVP_compteur_new$filter_neg_above <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new$nfilter_negab_bef <- nrow(filters_neg_above)
poolVP_compteur_new$nfilters_negab_af <- nrow(filters_neg_above_reduc)
}
timefilternegabovemake <- difftime(Sys.time(),t0filternegabovemake , units = "s")
if(time_compteur == T) t02 <- Sys.time()
## We remove all the one not accepted
poolVP <- poolVP %>%
filter(! cellid %in% unique(filters_neg_above$cellid) & !  cellid %in% unique(filters_neg_below$cellid))
t02 <- Sys.time()
nref <- nrow(poolVP)
if(time_compteur == T){
t02 <- t02
nref <- nref
}
filters
filters <-  list()
for(a in unique(self$targets$cmt)){
filters[[a]] <- self$make_filters(cmt = a)   %>%
gsub(pattern = "line\\$", replacement = "" )
}
filters
filters <-  list()
for(a in unique(self$targets$cmt)){
filters[[a]] <- self$make_filters(cmt = a)   %>%
gsub(pattern = "line\\$", replacement = "" )
}
filters
unique(self$targets$cmt)
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new(sourcefile = "file:///D:/these/Second_project/QSP/modeling_work/VT_simeoni/1_user_inputs/1_config_deux_elim.r")
self$set_targets(manual = tribble(~protocol, ~time, ~cmt, ~ min, ~max,
"dose50",20,"Central", 0.1, 23
))
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new(sourcefile = "file:///D:/these/Second_project/QSP/modeling_work/VT_simeoni/1_user_inputs/1_config_deux_elim.r")
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new(sourcefile = "file:///D:/these/Second_project/QSP/modeling_work/VT_simeoni/1_user_inputs/1_config_deux_elim.r")
self$set_targets(manual = tribble(~protocol, ~time, ~cmt, ~ min, ~max,
"dose50",20,"Conc", 0.1, 23
))
self$make_filters(cmt = "Conc")
VP_df <- crossing(  k21  = seq(0,1,0.1),
k12  = seq(0,1,0.1),
ke = seq(0,1,0.1),
ke2 = seq(0,1,0.1),
V1 = seq(1,10,1)
) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
ls = self$protocols
toadd <- VP_df
poolVP <-     VP_df %>%
rowid_to_column("cellid") %>%
crossing(protocol = unique(self$targets$protocol)) %>%
rowid_to_column("rowid")
if(time_compteur == T)  timesaver <- list()
#
#   poolVP %>%
#     filter(round(k2,1) == 1.2 & round(lambda0,2) == 0.07)
# Add the columns for each output
self$targets %>%
filter(protocol %in% unique(poolVP$protocol)) %>%
pull(cmt) %>%
unique -> cmts
col_to_add <- c(paste0(cmts, "_BU"),
paste0(cmts, "_AL"))
for(a in col_to_add) poolVP[a] <- NA
## Apply the filters
if(time_compteur == T){
t0 <- Sys.time()
nbef <- nrow(poolVP)
}
# remove filter neg
if(nrow(self$filters_neg_above) > 0){
# remove neg_above
# temp <-  self$filters_neg_above[[cmt]]
# filter_temp <- paste("!(", filter_template[[1]], ")")
# if(nrow(temp) > 0){
#   for(a in 1:nrow(temp)){
#
#     ref <-temp %>% slice(a)
#
#     poolVP <- poolVP %>%
#       filter(!!parse_expr(filter_temp))
#
#   }
# }
# # remove neg_below
# temp <-  self$filters_neg_below[[cmt]]
# filter_temp <- paste("!(", filter_template[[2]], ")")
# if(nrow(temp) > 0){
#   for(a in 1:nrow(temp)){
#
#     ref <-temp %>% slice(a)
#
#     poolVP <- poolVP %>%
#       filter(!!parse_expr(filter_temp))
#
#   }
# }
# poolVP <- poolVP %>%
#   select(-rowid) %>%
#   rowid_to_column()
}
# rm filter pos
for(cmt in cmts){
filter_template <- self$make_filters(cmt)%>%
gsub(pattern = "line\\$", replacement = "")
# set pos abov
temp <-  self$filters_pos_above[[cmt]]
if(is.null(temp)) temp <- tibble()
filter_temp <- paste("(", filter_template[[1]], ")")
if(nrow(temp) > 0){
for(a in 1:nrow(temp)){
ref <-temp %>% slice(a)
poolVP %>%
filter(!!parse_expr(filter_temp)) %>%
pull(rowid) ->rowidstemp
poolVP[[paste0(cmt, "_AL")]][rowidstemp] <- rep(T, length(rowidstemp))
}
}
# set pos below
temp <-  self$filters_pos_below[[cmt]]
filter_temp <- paste("(", filter_template[[2]], ")")
if(is.null(temp)) temp <- tibble()
if(nrow(temp) > 0){
for(a in 1:nrow(temp)){
ref <-temp %>% slice(a)
poolVP %>%
filter(!!parse_expr(filter_temp)) %>%
pull(rowid) ->rowidstemp
poolVP[[paste0(cmt, "_BU")]][rowidstemp] <- T
}
}
}
if(time_compteur == T){
timesaver$filtre_prev <- tibble(time = difftime(Sys.time(), t0, units = "s"), nrem =nbef -  nrow(poolVP) )
}
if(nrow(self$poolVP) > 0 ) poolVP <- poolVP %>%
mutate(cellid = cellid + max(self$poolVP$cellid),
rowid = rowid + max(self$poolVP$rowid))
### eviter les loupes infinis si un protocole n'as pas d'observion (ex no PK for control PD group)..
if(time_compteur == T) t0 <- Sys.time()
crossing(protocols = unique(toadd$protocol), cmt =  self$targets %>%
filter(protocol %in% unique(poolVP$protocol)) %>%
pull(cmt) %>%
unique) %>%
full_join(self$targets) %>%
filter(is.na(time)) -> torem
if(time_compteur == T) timesaver$toremfilter <- difftime(Sys.time(),t0, units = "s")
if(nrow(torem)>0){
for(a in 1:nrow(torem)){
cmt_to_rm <- torem$cmt[[a]]
pro <- torem$protocol[[a]]
poolVP[[paste0(cmt_to_rm,"_BU")]][poolVP$protocol == pro] <- FALSE
poolVP[[paste0(cmt_to_rm,"_AL")]][poolVP$protocol == pro] <- FALSE
}
}
if(time_compteur == T) timesaver$toremfilter2 <- difftime(Sys.time(),t0, units = "s")
# Handling death and survival agents, to greatly accelerate the process
all_param <- self$param
filters <-  list()
for(a in unique(self$targets$cmt)){
filters[[a]] <- self$make_filters(cmt = a)   %>%
gsub(pattern = "line\\$", replacement = "" )
}
# line_compar <- paste0("which(", line_compar,")")
# saveRDS(object = poolVP, file = gsub("\\.RDS", "_todetermine.RDS", file))
# Time compteur
if(time_compteur == T){
timesaver$poolVP_compteur <- tibble(n = NA, time  = NA, nelim =NA, ninfo =NA_real_, computmodel = NA)
n_compteur <- 0
}
siml <- tibble(cellid = integer(), protocol = character())
# just in case we never enter into the loop (if already filled, almost always useless)
ntotal <- nrow(poolVP)
t00 <- Sys.time()
maxinfo <- nrow(poolVP)
pb <- progress_bar$new(
format = "  VP creation [:bar] :current/:total (:percent) in :elapsed",
total = maxinfo, clear = FALSE, width= 60)
# pb <- progress_bar$new(total = )
slice0 <- poolVP   %>% slice(0) %>% select(!!!parse_exprs(all_param[all_param != "protocol"])) # filre_neg_above
neg_below <- neg_above <-  pos_below <- pos_above <- list() # filtre_neg_below
for(a in self$targets$cmt){
pos_below[[a]] <- slice0
pos_above[[a]] <- slice0
}
use_red_filter <- T
filters
newratio <- is.na(poolVP[, col_to_add]) %>% sum
pb$update(ratio = (maxinfo -newratio / length(col_to_add))/maxinfo)
if(time_compteur == T){
n_compteur <- n_compteur + 1
poolVP_compteur_new <- timesaver$poolVP_compteur %>%
slice(1) %>%
mutate(n = n_compteur)
}
# Just compute some stat...
t0 <- Sys.time()
filter_to_use <-  paste0("is.na(", col_to_add,")") %>%
paste0(collapse = "|")
line <- poolVP %>%
filter(!!parse_expr(filter_to_use))
line <- line %>%
filter(protocol == sample(line$protocol, 1))
line <- line %>%
sample_n(min(npersalve, nrow(line))) %>%
rowid_to_column("id")
if(time_compteur == T) poolVP_compteur_new$timesampleline <- difftime(Sys.time(), t0, units = "s")
# Now we need to handle the administrations
# by making a temporar copy
# protocol  <- self$protocols[[line$protocol[[1]]]]
if(time_compteur == T) t02 <- Sys.time()
protocol <-  line %>%
mutate(protocol2 = map(protocol, ~ self$protocols[[.x]])) %>%
select(id, protocol2) %>%
unnest(protocol2)
if(time_compteur == T) poolVP_compteur_new$protocoldf <- difftime(Sys.time(), t02, units = "s")
# And now we can make the simulation and extract the result !
time_simulations <- Sys.time()
b <- Sys.time()
res <- simulations2(ind_param = line, add_events = protocol, returnSim = T,
icmt = self$initial_cmt_values, time_vec =self$times,
pardf = self$parameters_default_values, model = self$model)#;res
res <- as.tibble(res)
time_simulations <-  difftime(Sys.time(), b, units = "s")
n_simulations <-  nrow(line)
if(time_compteur == T){
poolVP_compteur_new$timemodel <- time_simulations
poolVP_compteur_new$nsimul <- n_simulations
}
remv <- F
cellidtorem <- double()
if(time_compteur == T) t02 <- Sys.time()
# # get targets for this patients
targets_temp <- self$targets %>%
filter(protocol == unique(line$protocol))#%>%
res2 <- res %>%
gather("cmt", "value", unique(targets_temp$cmt)) %>%
filter(time %in% targets_temp$time) %>%
left_join( targets_temp, by = c("time", "cmt")) %>%
filter(!is.na(min)) %>%
mutate(be_up = value <= max) %>%
mutate(ab_low = value >= min)
res2
t0filternegbelow <- Sys.time()
res2 %>%
filter(ab_low == 0) %>%
group_by(id, cmt) %>%
slice(1) %>% ungroup() -> idsbelow
filters_neg_below <- idsbelow %>%
left_join(line,by = c("id", "protocol")) %>%
select(!!!parse_exprs(all_param), "cmt","cellid")
filters_neg_below
if(nrow(filters_neg_below) > 0){
filters_neg_below_up_reduc <- filter_reduc(filters_neg_below ,obj = self, direction = "below")
#%>%
# arrange(k2, desc(lambda0))
}else{
filters_neg_below_up_reduc <- filters_neg_below
}
filters_neg_below_up_reduc
if(time_compteur == T){
poolVP_compteur_new$filter_neg_below <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new$nfilter_negbel_bef <- nrow(filters_neg_below)
poolVP_compteur_new$nfilters_negbel_af <- nrow(filters_neg_below_up_reduc)
}
timefilternegbelowmake <- difftime(Sys.time(),t0filternegbelow , units = "s")
timefilternegbelowmake
# lines output neg_ above
if(time_compteur == T) t02 <- Sys.time()
t0filternegabovemake <- Sys.time()
res2 %>%
filter(be_up == 0) %>%
group_by(id, cmt) %>%
slice(1) %>% ungroup() ->idsabove
filters_neg_above <-  idsabove %>%
left_join(line,by = c("id", "protocol")) %>%
select(!!!parse_exprs(all_param), "cmt" , "cellid")
filters_neg_above
if(nrow(filters_neg_above) > 0){
filters_neg_above_reduc <- filter_reduc(filters_neg_above ,obj = self, direction =  "above")
# %>%
# arrange(desc(k2))
}else{
filters_neg_above_reduc <- filters_neg_above
}
if(time_compteur == T){
poolVP_compteur_new$filter_neg_above <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new$nfilter_negab_bef <- nrow(filters_neg_above)
poolVP_compteur_new$nfilters_negab_af <- nrow(filters_neg_above_reduc)
}
timefilternegabovemake <- difftime(Sys.time(),t0filternegabovemake , units = "s")
if(time_compteur == T) t02 <- Sys.time()
## We remove all the one not accepted
poolVP <- poolVP %>%
filter(! cellid %in% unique(filters_neg_above$cellid) & !  cellid %in% unique(filters_neg_below$cellid))
t02 <- Sys.time()
nref <- nrow(poolVP)
if(time_compteur == T){
t02 <- t02
nref <- nref
}
poolVP
filters
t02 <- Sys.time()
nref <- nrow(poolVP)
if(time_compteur == T){
t02 <- t02
nref <- nref
}
if(nrow(filters_neg_above_reduc) > 0){
for(a in 1:nrow(filters_neg_above_reduc)){
ref <- filters_neg_above_reduc %>% slice(a)
poolVP <- poolVP %>%
mutate(test = !!parse_expr(filters[[ref$cmt]][["above"]])) %>%
filter(test == F)
}
}
poolVP
filters
filters_neg_above_reduc
filters_neg_above_reduc
filters_neg_below_up_reduc
poolVP
if(nrow(filters_neg_below_up_reduc)> 0){
for(a in 1:nrow(filters_neg_below_up_reduc)){
ref <- filters_neg_below_up_reduc %>% slice(a)
poolVP <- poolVP %>%
mutate(test = !!parse_expr(filters[[ref$cmt]][["below"]])) %>%
filter(test == F)
}
}
poolVP
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new(sourcefile = "file:///D:/these/Second_project/QSP/modeling_work/VT_simeoni/1_user_inputs/1_config_deux_elim.r")
self$set_targets(manual = tribble(~protocol, ~time, ~cmt, ~ min, ~max,
"dose50",20,"Conc", 0.1, 23
))
self$param_reduce
self$make_filters(cmt = "Conc")
VP_df <- crossing(  k21  = seq(0,1,0.1),
k12  = seq(0,1,0.1),
ke = seq(0,1,0.1),
ke2 = seq(0,1,0.1),
V1 = seq(1,10,1)
) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
self$add_VP(VP_df, fillatend = F, reducefilteratend = F)
self$plot_VP(nmax = 1000)
self$times
self$poolVP
self$poolVP %>% as_tibble()
self$poolVP %>% as_tibble() %>% slice(1)
self$poolVP %>% as_tibble() %>% slice(1) %>% unnest()
self$poolVP %>% as_tibble() %>% slice(1) %>% unnest() %>% filter(time > 20)
self$poolVP %>% as_tibble() %>% slice(1) %>% unnest() %>% filter(time = 20)
self$poolVP %>% as_tibble() %>% slice(1) %>% unnest() %>% filter(time == 20)
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new(sourcefile = "file:///D:/these/Second_project/QSP/modeling_work/VT_simeoni/1_user_inputs/1_config_deux_elim.r")
self$set_targets(manual = tribble(~protocol, ~time, ~cmt, ~ min, ~max,
"dose50",20,"Conc", 0.1, 23
))
self$param_reduce
self$make_filters(cmt = "Conc")
VP_df <- crossing(  k21  = seq(0,1,0.1),
k12  = seq(0,1,0.1),
ke = seq(0,1,0.1),
ke2 = seq(0,1,0.1),
V1 = seq(1,10,1)
) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
self$add_VP(VP_df, fillatend = F, reducefilteratend = F)
self$plot_VP(nmax = 1000)
self$poolVP
nmax = 1
self$poolVP %>%
sample_n(nmax)
self$poolVP %>%
sample_n(nmax) %>%
# slice() %>%
# slice(1:100) %>%
unnest(simul)
self$poolVP %>%
sample_n(nmax) %>%
# slice() %>%
# slice(1:100) %>%
unnest(simul) %>%
gather("cmt", "value", !!!parse_exprs(unique(self$targets$cmt)))
self$poolVP %>%
sample_n(nmax) %>%
# slice() %>%
# slice(1:100) %>%
unnest(simul) %>%
gather("cmt", "value", !!!parse_exprs(unique(self$targets$cmt))) %>%
filter( ! (cmt == "Conc" & value == 0)) %>%
# filter( ! (cmt == "Conc" & time > 15)) %>%
ggplot()+
geom_line(aes(time, value, group = cellid))+
facet_wrap(protocol~cmt, scales = "free")+
scale_y_log10()+
geom_segment(data = self$targets ,
aes(x = time, xend = time, y = min, yend = max), col ="red", size = 2)
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new(sourcefile = "file:///D:/these/Second_project/QSP/modeling_work/VT_simeoni/1_user_inputs/1_config_deux_elim.r")
self$set_targets(manual = tribble(~protocol, ~time, ~cmt, ~ min, ~max,
"dose50",20,"Conc", 0.1, 23
))
self$param_reduce
self$make_filters(cmt = "Conc")
VP_df <- crossing(  k21  = seq(0,1,0.1),
k12  = seq(0,1,0.1),
ke = seq(0,1,0.1),
ke2 = seq(0,1,0.1),
V1 = seq(1,10,1)
) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
self$add_VP(VP_df, fillatend = F, reducefilteratend = F)
self$plot_VP(nmax = 1000)
self$make_filters()
self$make_filters("Conc")
