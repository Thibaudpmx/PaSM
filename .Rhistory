left_join(res %>%   filter( ! (id %in% idtorem))  %>% group_by(id) %>% nest(), by = "id")
})
target
cohort
t0
189 * 60
1.79 * 60
1.79 * 60 / 100
0.5
0.34
0.35
cohort
cohort %>%
rowid_to_column("ids") %>%
mutate(group = ceiling(ids/2000))
cohort <- crossing(cohort,  proto  = unique(target$protocol))
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(target$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
temp <- demo %>% filter(a)
a = 1
temp <- demo %>% filter(grou == a)
demo
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = ceiling(ids/2000))
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000))
temp <- demo %>% filter(grou == a)
temp <- demo %>% filter(group == a)
temp
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
x
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble
res %>%
filter(time %in% target$time) %>%
left_join(x %>% select(id, proto), by = "id") %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(target$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(id) -> idtorem
idtorem
demo
idtorems <- double()
resultsap <- tibble()
res
x
res %>%
filter(time %in% target$time) %>%
left_join(x %>% select(id, proto, ids), by = "id") %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(target$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(id) -> idtorem
idtorem
idtorem
res %>%
filter(time %in% target$time) %>%
left_join(x %>% select(id, proto, ids), by = "id") %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(target$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min)
res %>%
filter(time %in% target$time) %>%
left_join(x %>% select(id, proto, ids), by = "id") %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(target$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(ids ) -> idtorem
resultsap
res
bind_rows(resultsap,  res %>%   filter( ! (ids %in% idtorem))   )
res
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble %>%
left_join(x %>% select(id, proto, ids), by = "id")
res
bind_rows(resultsap,  res %>%   filter( ! (ids %in% idtorem))   )
idtorems
cohort
cohort
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(target$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000))
demo
resultsap
resultsap <- bind_rows(resultsap,  res %>%   filter( ! (ids %in% idtorem))   )
resultsap
demo %>%
filter(ids %in% idtorems) %>%
left_join( resultsap, by = c("ids") )
demo %>%
filter(! (ids %in% idtorems)) %>%
left_join( resultsap, by = c("ids") )
# difftime(Sys.time(),t00, units = "s")
unique(demo$group)
demo
demo %>%
filter(! (ids %in% idtorems)) %>%
left_join( resultsap, by = c("ids") )
demo %>%
filter(! (ids %in% idtorems)) %>%
left_join( resultsap, by = c("ids", "proto") )
manual <- function(target, cohort){
cohort <- crossing(cohort,  proto  = unique(target$protocol))
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(target$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000))
idtorems <- double()
resultsap <- tibble()
for(a in unique(demo$group)){
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble %>%
left_join(x %>% select(id, proto, ids), by = "id")
res %>%
filter(time %in% target$time) %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(target$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(ids ) -> idtorem
idtorems <- c(idtorems, idtorem)
resultsap <- bind_rows(resultsap,  res %>%   filter( ! (ids %in% idtorem))   )
}
demo <- demo %>%
filter(! (ids %in% idtorems)) %>%
left_join( resultsap, by = c("ids", "proto") )
# difftime(Sys.time(),t00, units = "s")
}
target <- Targets(proto = 1,cmt =  1,time =  c(48))
cohort <- cohort_creator(nmodif = 2)
cohort
t0 <- Sys.time()
ref <- manual(target, cohort %>% slice(1:2000))
t0 <- difftime(Sys.time(),t0)
target
target <- Targets(proto = 1,cmt =  1,time =  c(48))
cohort <- cohort_creator(nmodif = 2)
cohort <- crossing(cohort,  proto  = unique(target$protocol))
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(target$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000))
idtorems <- double()
resultsap <- tibble()
for(a in unique(demo$group)){
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble %>%
left_join(x %>% select(id, proto, ids), by = "id")
res %>%
filter(time %in% target$time) %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(target$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(ids ) -> idtorem
idtorems <- c(idtorems, idtorem)
resultsap <- bind_rows(resultsap,  res %>%   filter( ! (ids %in% idtorem))   )
}
a =
1
a
unique(demo$group)
cohort
cohort <-  cohort %>% slice(1:2000)
cohort <- crossing(cohort,  proto  = unique(target$protocol))
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
cohort
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(target$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000))
idtorems <- double()
resultsap <- tibble()
for(a in unique(demo$group)){
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble %>%
left_join(x %>% select(id, proto, ids), by = "id")
res %>%
filter(time %in% target$time) %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(target$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(ids ) -> idtorem
idtorems <- c(idtorems, idtorem)
resultsap <- bind_rows(resultsap,  res %>%   filter( ! (ids %in% idtorem))   )
}
a
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
x
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble %>%
left_join(x %>% select(id, proto, ids), by = "id")
self$model$solve(x %>% select(-proto), events, c(X2 = 0))
self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble
x
cohort
cohort %>%
rowid_to_column("ids")
cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000))
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000))
idtorems <- double()
resultsap <- tibble()
unique(demo$group)
a = 0
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble %>%
left_join(x %>% select(id, proto, ids), by = "id")
res %>%
filter(time %in% target$time) %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(target$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(ids ) -> idtorem
idtorems <- c(idtorems, idtorem)
resultsap <- bind_rows(resultsap,  res %>%   filter( ! (ids %in% idtorem))   )
a ) 1
a = 1
cohort <- crossing(cohort,  proto  = unique(target$protocol))
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
events
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble %>%
left_join(x %>% select(id, proto, ids), by = "id")
x
x %>% select(-proto)
events
events %>% distinct(id)
manual <- function(target, cohort){
cohort <- crossing(cohort,  proto  = unique(target$protocol))
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(target$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000))
idtorems <- double()
resultsap <- tibble()
for(a in unique(demo$group)){
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble %>%
left_join(x %>% select(id, proto, ids), by = "id")
res %>%
filter(time %in% target$time) %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(target$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(ids ) -> idtorem
idtorems <- c(idtorems, idtorem)
resultsap <- bind_rows(resultsap,  res %>%   filter( ! (ids %in% idtorem))   )
}
demo <- demo %>%
filter(! (ids %in% idtorems)) %>%
left_join( resultsap, by = c("ids", "proto") )
# difftime(Sys.time(),t00, units = "s")
}
ref <- manual(target, cohort %>% slice(1:1999))
target <- Targets(proto = 1,cmt =  1,time =  c(48))
cohort <- cohort_creator(nmodif = 2)
ref <- manual(target, cohort %>% slice(1:1999))
ref
t0 <- Sys.time()
ref <- manual(target, cohort %>% slice(1:1999))
t0 <- difftime(Sys.time(),t0)
t0
0
0.66 * 100
target <- Targets(proto = 1,cmt =  1,time =  c(48))
cohort <- cohort_creator(nmodif = 2)
t0 <- Sys.time()
ref <- manual(target, cohort)
t0 <- difftime(Sys.time(),t0)
t0
mbref <- microbenchmark(ref <- manual(target, cohort), times = 5)
target <- Targets(proto = 1,cmt =  1,time =  c(48))
cohort <- cohort_creator(nmodif = 2)
mbref <- microbenchmark(ref <- manual(target, cohort), times = 5)
ref <- manual(target, cohort)
target <- Targets(proto = 1,cmt =  1,time =  c(48))
cohort <- cohort_creator(nmodif = 2)
cohort <- crossing(cohort,  proto  = unique(target$protocol))
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(target$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000))
idtorems <- double()
resultsap <- tibble()
unique(demo$group)
a = 100
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
x
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble %>%
left_join(x %>% select(id, proto, ids), by = "id")
self$model$solve(x %>% select(-proto), events, c(X2 = 0))
self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble
x
if(max(x$id) == 1) res <- res %>% mutate(id = 1)
res <- res %>%
left_join(x %>% select(id, proto, ids), by = "id")
maxres
res
rm(list = ls())
library(peccary)
library(QSPVP)
library(RxODE)
library(progress)
library(R6)
library(crayon)
library(profvis)
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new()
# self$set_targets(filter = Dose == 50 & cmt == "tumVol", ntime = 8)
self$set_targets(filter = cmt == "tumVol"  ,timeforce = c(12,19, 30,45))
VP_df <- crossing(k1 = c(0.5),
k2 = seq(0,8,0.0025),
ke = 1 ,#*  seq(0.6,1.4,0.2),
lambda0 =seq(0,0.16,0.0025),
lambda1 = c(12),
Vd =  40) %>% #c(0.8,1,1.2)) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
VP_df <- crossing(k1 = c(0.5),
k2 = seq(0,8,0.0025),
ke = 1 ,#*  seq(0.6,1.4,0.2),
lambda0 =seq(0,0.16,0.0025),
lambda1 = c(12),
w0 = 50,
Vd =  40) %>% #c(0.8,1,1.2)) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
self$add_VP(VP_df, fillatend = F, reducefilteratend = T,  npersalve = 2000,  time_compteur = F, methodFilter = 2)
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new()
# self$set_targets(filter = Dose == 50 & cmt == "tumVol", ntime = 8)
self$set_targets(filter = cmt == "tumVol"  ,timeforce = c(12,19, 30,45))
VP_df <- crossing(k1 = c(0.5),
k2 = seq(0,8,0.0025),
ke = 1 ,#*  seq(0.6,1.4,0.2),
lambda0 =seq(0,0.16,0.0025),
lambda1 = c(12),
w0 = 50,
Vd =  40) %>% #c(0.8,1,1.2)) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
# self$add_VP(VP_df, fillatend = F, reducefilteratend = T,  npersalve = 2000,  time_compteur = F, methodFilter = 1)
self$add_VP(VP_df, fillatend = F, reducefilteratend = T,  npersalve = 2000,  time_compteur = F, methodFilter = 2, use_green_filter = T)
VP_df
# self$set_targets(filter = Dose == 50 & cmt == "tumVol", ntime = 8)
self$set_targets(filter = cmt == "tumVol"  ,timeforce = c(12,19, 30,45))
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new()
# self$set_targets(filter = Dose == 50 & cmt == "tumVol", ntime = 8)
self$set_targets(filter = cmt == "tumVol"  ,timeforce = c(12,19, 30,45))
VP_df <- crossing(k1 = c(0.5),
k2 = seq(0,8,0.0025),
ke = 1 ,#*  seq(0.6,1.4,0.2),
lambda0 =seq(0,0.16,0.0025),
lambda1 = c(12),
w0 = 50,
Vd =  40) %>% #c(0.8,1,1.2)) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
self$add_VP(VP_df, fillatend = F, reducefilteratend = T,  npersalve = 2000,  time_compteur = F, methodFilter = 2, use_green_filter = F)
self$plot_VP(nmax = 2000)
