perrun$post_simul_join1 <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
res %>%
filter(time %in% self$targets$time) %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(self$targets$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(ids ) -> idtorem
perrun$post_simul_join2 <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
idtorems <- c(idtorems, idtorem)
resultsap[[a]]<-  res %>%   filter( ! (ids %in% idtorem))
perrun$post_simul_join3 <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
loop2 <-  bind_rows(loop2,perrun )
}
timeTrack2$loop <- loop2 ;  t0 <- Sys.time()
resultsap <- bind_rows(resultsap)
demo <- demo %>%
filter(! (ids %in% idtorems)) %>%
left_join( resultsap, by = c("ids", "proto") )
timeTrack2$finalmerge <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
timeTrack2
timeTrack2 <- list()
t00 <- t0 <- Sys.time()
cohort <- crossing(VP_df,  proto  = unique(self$targets$protocol)) %>%
mutate(psi = 20)
target <- self$targets
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(self$targets$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000)+1)
idtorems <- double()
resultsap <- list()
timeTrack2$prefor <- difftime(Sys.time(), t0, units = "s")
loop2 <-  tibble()
tpreloop <- Sys.time()
a = 1
perrun <-  tibble()
t0 <- Sys.time()
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
perrun$pre_simul <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
perrun
perrun
t0 <- Sys.time()
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
perrun  <- tibble(pre_simul = difftime(Sys.time(), t0, units = "s"));  t0 <- Sys.time()
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble
if(max(x$id) == 1) res <- res %>% mutate(id = 1)
perrun$simul <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
res <- res %>%
left_join(x %>% select(id, proto, ids), by = "id")
perrun$post_simul_join1 <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
res %>%
filter(time %in% self$targets$time) %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(self$targets$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(ids ) -> idtorem
perrun$post_simul_join2 <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
idtorems <- c(idtorems, idtorem)
resultsap[[a]]<-  res %>%   filter( ! (ids %in% idtorem))
perrun$post_simul_join3 <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
loop2 <-  bind_rows(loop2,perrun )
loop2
perrun  <- tibble(pre_simul = difftime(Sys.time(), t0, units = "s"));  t0 <- Sys.time()
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble
if(max(x$id) == 1) res <- res %>% mutate(id = 1)
perrun$simul <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
perrun$simul
perrun$simul
perrun$simul
perrun  <- tibble(pre_simul = difftime(Sys.time(), t0, units = "s"));  t0 <- Sys.time()
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble
# if(max(x$id) == 1) res <- res %>% mutate(id = 1)
perrun$simul <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
perrun$simul
perrun$simul
perrun  <- tibble(pre_simul = difftime(Sys.time(), t0, units = "s"));  t0 <- Sys.time()
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble
# if(max(x$id) == 1) res <- res %>% mutate(id = 1)
perrun$simul <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
perrun$simul
perrun$simul
perrun  <- tibble(pre_simul = difftime(Sys.time(), t0, units = "s"));  t0 <- Sys.time()
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble
if(max(x$id) == 1) res <- res %>% mutate(id = 1)
perrun$simul <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
perrun$simul
perrun$simul
Sys.time()
x %>% select(-proto)
x %>% select(-proto)
events
eventsadmin
x
eventsadmin
eventsadmin
x
t0 <- Sys.time()
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x %>% select(id, ids, group) , by = c("id", "proto")) %>%
filter(!is.na(ids))
events <- eventsadmin %>%
left_join(x %>% select(id, ids, group, proto) , by = c("id", "proto")) %>%
filter(!is.na(ids))
perrun  <- tibble(pre_simul = difftime(Sys.time(), t0, units = "s"));  t0 <- Sys.time()
perrun  <- tibble(pre_simul = difftime(Sys.time(), t0, units = "s"));  t0 <- Sys.time()
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble
if(max(x$id) == 1) res <- res %>% mutate(id = 1)
perrun$simul <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
perrun$simul
perrun$simul
perrun$simul
perrun$simul
perrun$simul
perrun$simul
perrun  <- tibble(pre_simul = difftime(Sys.time(), t0, units = "s"));  t0 <- Sys.time()
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble
if(max(x$id) == 1) res <- res %>% mutate(id = 1)
perrun$simul <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
perrun$simul
perrun$simul
perrun  <- tibble(pre_simul = difftime(Sys.time(), t0, units = "s"));  t0 <- Sys.time()
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble
if(max(x$id) == 1) res <- res %>% mutate(id = 1)
perrun$simul <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
perrun$simul
timeTrack2 <- list()
t00 <- t0 <- Sys.time()
cohort <- crossing(VP_df,  proto  = unique(self$targets$protocol)) %>%
mutate(psi = 20)
target <- self$targets
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(self$targets$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000)+1)
idtorems <- double()
resultsap <- list()
timeTrack2$prefor <- difftime(Sys.time(), t0, units = "s")
loop2 <-  tibble()
tpreloop <- Sys.time()
for(a in unique(demo$group)){
t0 <- Sys.time()
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x %>% select(id, ids, group, proto) , by = c("id", "proto")) %>%
filter(!is.na(ids))
perrun  <- tibble(pre_simul = difftime(Sys.time(), t0, units = "s"));  t0 <- Sys.time()
res <- self$model$solve(x %>% select(-proto), events, c(X2 = 0)) %>%
as_tibble
if(max(x$id) == 1) res <- res %>% mutate(id = 1)
perrun$simul <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
res <- res %>%
left_join(x %>% select(id, proto, ids), by = "id")
perrun$post_simul_join1 <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
res %>%
filter(time %in% self$targets$time) %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(self$targets$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(ids ) -> idtorem
perrun$post_simul_join2 <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
idtorems <- c(idtorems, idtorem)
resultsap[[a]]<-  res %>%   filter( ! (ids %in% idtorem))
perrun$post_simul_join3 <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
loop2 <-  bind_rows(loop2,perrun )
}
timeTrack2$loop <- loop2 ;  t0 <- Sys.time()
timeTrack2$tloop <- difftime(Sys.time(), tpreloop, units = "s")
resultsap <- bind_rows(resultsap)
demo <- demo %>%
filter(! (ids %in% idtorems)) %>%
left_join( resultsap, by = c("ids", "proto") )
timeTrack2$finalmerge <- difftime(Sys.time(), t0, units = "s") ;  t0 <- Sys.time()
timeTrack2$ttotal <- difftime(Sys.time(), t00, units = "s") ;  t0 <- Sys.time()
#protocoldf <- sample next lines and compute protocol
tt <- self$timeTrack
total <-tt$tTOTAL
loop <- tt$poolVP_compteur
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
timeTrack2$ttotal
target <- Targets(proto = 1:2,cmt =  1,time =  c(48))
cohort <- cohort_creator(nmodif = 2)
cohorts <- list()
cohort_creator <- function(nmodif){
base <- crossing( k2 = 1,
lambda0 = 0.1,
w0 = 50,
Vd =  40,
lambda1 = c(12),
ke = 1 #*  seq(0.6,1.4,0.2),
) %>% #c(0.8,1,1.2)) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
nperparam <- ceiling(200000^(1/nmodif))
list <-   map(1:nmodif, function(x){
min <- base[[x]]/10
max <- base[[x]]*10
step <- (max - min)/(nperparam-1)
expr(seq( !!min,  !!max, !!step  ))
}
)
names(list) <- names(base[1:nmodif])
if(nmodif < length(base)){
output <- crossing(base[-c(1:nmodif)], !!!list)
}else{
output <- crossing(!!!list)
}
output %>%
slice(1:200000) %>%
mutate(k1 = 0.5, psi = 20)
}
cohort_creator(6)
Targets <- function(proto = 1, cmt = c("tumVol"), time = c(45) ){
proto <- c("dose50", "dose100", "dose0")[proto]
cmt <- c("tumVol", "Conc")[cmt]
crossing(protocol = proto, cmt = cmt , time = time) %>%
mutate(min = -Inf, max = Inf)
}
Targets(proto = 1:3,cmt =  1:2,time =  c(25,30,50))
target <- Targets(proto = 1:2,cmt =  1,time =  c(48))
cohort <- cohort_creator(nmodif = 2)
self <- VP_proj_creator$new()
manual <- function(target, cohort){
cohort <- crossing(cohort,  proto  = unique(target$protocol))
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(target$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = ceiling(ids/2000)) %>%
# filter(group == 2) -> x
group_split(group) %>%
map(function(x){
x <-  x %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
res <- self$model$solve(x %>% select(-proto), events %>% select(id, ids, group, proto), c(X2 = 0)) %>%
as_tibble
res %>%
filter(time %in% target$time) %>%
left_join(x %>% select(id, proto), by = "id") %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(target$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(id) -> idtorem
x %>%
filter(! (id %in% idtorem)) %>%
left_join(res %>%   filter( ! (id %in% idtorem))  %>% group_by(id) %>% nest(), by = "id")
}) %>%
invoke(.fn = bind_rows)
# difftime(Sys.time(),t00, units = "s")
}
manual <- function(target, cohort){
cohort <- crossing(cohort,  proto  = unique(target$protocol))
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(target$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000)+1)
idtorems <- double()
resultsap <- list()
for(a in unique(demo$group)){
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
res <- self$model$solve(x %>% select(-proto), events %>% select(id, ids, group, proto), c(X2 = 0)) %>%
as_tibble
if(max(x$id) == 1) res <- res %>% mutate(id = 1)
res <- res %>%
left_join(x %>% select(id, proto, ids), by = "id")
res %>%
filter(time %in% target$time) %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(target$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(ids ) -> idtorem
idtorems <- c(idtorems, idtorem)
resultsap[[a]]<-  res %>%   filter( ! (ids %in% idtorem))
}
resultsap <- bind_rows(resultsap)
demo <- demo %>%
filter(! (ids %in% idtorems)) %>%
left_join( resultsap, by = c("ids", "proto") )
# difftime(Sys.time(),t00, units = "s")
}
target <- Targets(proto = 1,cmt =  1,time =  c(48))
cohort <- cohort_creator(nmodif = 2)
mbref <- microbenchmark(ref <- manual(target, cohort), times = 5)
target
cohort
cohort <- crossing(cohort,  proto  = unique(target$protocol))
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(target$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000)+1)
idtorems <- double()
resultsap <- list()
a = 1
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x , by = c("id", "proto")) %>%
filter(!is.na(ids))
res <- self$model$solve(x %>% select(-proto), events %>% select(id, ids, group, proto), c(X2 = 0)) %>%
as_tibble
x %>% select(-proto)
events
events
x
events <- eventsadmin %>%
left_join(x%>% select(id, ids, group, proto) , by = c("id", "proto")) %>%
filter(!is.na(ids))
events
manual <- function(target, cohort){
cohort <- crossing(cohort,  proto  = unique(target$protocol))
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(target$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = ceiling(ids/2000)) %>%
# filter(group == 2) -> x
group_split(group) %>%
map(function(x){
x <-  x %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x %>% select(id, ids, group, proto), by = c("id", "proto")) %>%
filter(!is.na(ids))
res <- self$model$solve(x %>% select(-proto), events , c(X2 = 0)) %>%
as_tibble
res %>%
filter(time %in% target$time) %>%
left_join(x %>% select(id, proto), by = "id") %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(target$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(id) -> idtorem
x %>%
filter(! (id %in% idtorem)) %>%
left_join(res %>%   filter( ! (id %in% idtorem))  %>% group_by(id) %>% nest(), by = "id")
}) %>%
invoke(.fn = bind_rows)
# difftime(Sys.time(),t00, units = "s")
}
manual <- function(target, cohort){
cohort <- crossing(cohort,  proto  = unique(target$protocol))
self$protocols[] %>%
bind_rows() %>%
mutate(proto = names( self$protocols)) -> protocols
eventsadmin  <- crossing(id = 1:2000, proto  = unique(target$protocol)) %>%
left_join(protocols, by = "proto" ) %>%
mutate(evid = 1)
eventsadmin  <-   eventsadmin %>%
bind_rows(
eventsadmin  %>%
mutate(evid = 0, amt = 0) %>%
select(-time) %>%
crossing(time = self$times)
) %>%
arrange(id, time)
demo <- cohort %>%
rowid_to_column("ids") %>%
mutate(group = floor(ids/2000)+1)
idtorems <- double()
resultsap <- list()
for(a in unique(demo$group)){
x <- demo %>% filter(group == a) %>%
rowid_to_column("id")
events <- eventsadmin %>%
left_join(x%>% select(id, ids, group, proto) , by = c("id", "proto")) %>%
filter(!is.na(ids))
res <- self$model$solve(x %>% select(-proto), events , c(X2 = 0)) %>%
as_tibble
if(max(x$id) == 1) res <- res %>% mutate(id = 1)
res <- res %>%
left_join(x %>% select(id, proto, ids), by = "id")
res %>%
filter(time %in% target$time) %>%
rename(protocol = proto) %>%
gather("cmt", "value", unique(target$cmt)) %>%
left_join(target, by = c("time", "protocol", "cmt")) %>%
filter(value > max | value < min) %>% pull(ids ) -> idtorem
idtorems <- c(idtorems, idtorem)
resultsap[[a]]<-  res %>%   filter( ! (ids %in% idtorem))
}
resultsap <- bind_rows(resultsap)
demo <- demo %>%
filter(! (ids %in% idtorems)) %>%
left_join( resultsap, by = c("ids", "proto") )
# difftime(Sys.time(),t00, units = "s")
}
mpute the reference
t0 <- Sys.time()
ref <- manual(target, cohort)
t0 <- difftime(Sys.time(),t0)
mbref <- microbenchmark(ref <- manual(target, cohort), times = 5)
target <- Targets(proto = 1,cmt =  1,time =  c(48))
cohort <- cohort_creator(nmodif = 2)
mbref <- microbenchmark(ref <- manual(target, cohort), times = 5)
mbref
