# left_join(line %>% distinct(id, id), by  = "id") %>%
filter(be_up == F | ab_low == F) %>%
pull(id_origin) %>%
unique -> idstorem
if(keepRedFiltaftDis == T){
newfilters <- res2 %>%
filter(be_up == F) %>%
distinct(id, cmt) %>%
left_join(line, by  = "id") %>%
distinct(!!!parse_exprs(all_param), cmt,id)
self$filters_neg_above <- bind_rows(self$filters_neg_above,
newfilters )
newfilters <- res2 %>%
filter( ab_low == F) %>%
left_join(line, by  = "id") %>%
# filter( id %in% idstorem) %>%
distinct(!!!parse_exprs(all_param), cmt,id)
self$filters_neg_below <- bind_rows(self$filters_neg_below, newfilters )
}
poolVP <- poolVP %>%
filter(! id %in% idstorem)
poolVP_id <- poolVP_id %>%
filter(! id %in% idstorem)
if(time_compteur == T){
poolVP_compteur_new$ElimRedUnac <-  difftime(Sys.time(), t02, units = "s")
}
}else
{
# if red filter
# if(time_compteur == T) poolVP_compteur_new[paste0("res2_", cmtt)] <- difftime(Sys.time(), t02, units = "s")
##### Remove patients neg  and compute red filters if activated ########
# lines output neg_ below
t0filternegbelow <- Sys.time()
res2 %>%
filter(ab_low == 0) %>%
group_by(id_origin, cmt) %>%
slice(1) %>% ungroup() -> idsbelow
filters_neg_below <- idsbelow %>%
left_join(line,by = c("id", "protocol", "id_origin")) %>%
select(!!!parse_exprs(all_param), "cmt","id", "id_origin")
if(nrow(filters_neg_below) > 0){
filters_neg_below_up_reduc <- filter_reduc(df = filters_neg_below ,obj = self, direction = "below")
}else{
filters_neg_below_up_reduc <- filters_neg_below
}
timefilternegbelowmake <- difftime(Sys.time(),t0filternegbelow , units = "s")
if(time_compteur == T){
poolVP_compteur_new$Treduc_filter_neg_below <- timefilternegbelowmake
poolVP_compteur_new$nfilter_negbel_bef <- nrow(filters_neg_below)
poolVP_compteur_new$nfilters_negbel_af <- nrow(filters_neg_below_up_reduc)
}
#
# lines output neg_ above
t0filternegabovemake <- Sys.time()
res2 %>%
filter(be_up == 0) %>%
group_by(id, cmt) %>%
slice(1) %>% ungroup() ->idsabove
filters_neg_above <-  idsabove %>%
left_join(line,by = c("id", "protocol", "id_origin")) %>%
select(!!!parse_exprs(all_param), "cmt" , "id", "id_origin")
if(nrow(filters_neg_above) > 0){
filters_neg_above_reduc <- filter_reduc(filters_neg_above ,obj = self, direction =  "above")
}else{
filters_neg_above_reduc <- filters_neg_above
}
timefilternegabovemake <- difftime(Sys.time(),t0filternegabovemake , units = "s")
if(time_compteur == T){
poolVP_compteur_new$Treduc_filter_neg_above <- timefilternegabovemake
poolVP_compteur_new$nfilter_negab_bef <- nrow(filters_neg_above)
poolVP_compteur_new$nfilters_negab_af <- nrow(filters_neg_above_reduc)
}
if(time_compteur == T) t02 <- Sys.time()
## We remove all the one not accepted
poolVP <- poolVP %>%
filter(! id %in% c(unique(filters_neg_above$id_origin), unique(filters_neg_below$id_origin)))
# which(c(unique(filters_neg_above$id_origin, unique(filters_neg_below$id_origin))) %in% poolVP$id[!is.na(poolVP$tumVol_BU)])
poolVP_id <- poolVP_id %>%
filter(! id %in% c(unique(filters_neg_above$id_origin), unique(filters_neg_below$id_origin)))
if(time_compteur == T) poolVP_compteur_new$TremoveNegDirect <- difftime(Sys.time(),t02 , units = "s")
#### Apply red filter if activated
t02 <- Sys.time()
nref <- nrow(poolVP)
if(time_compteur == T){
t02 <- t02
nref <- nref
}
if(nrow(filters_neg_above_reduc) > 0){
# method 1 with loop
if(methodFilter == 1){
for(a in 1:nrow(filters_neg_above_reduc)){
ref <- filters_neg_above_reduc %>% slice(a)
poolVP_id %>%
mutate(test = !!parse_expr(filters[[ref$cmt]][["above"]])) %>%
filter(test == T) %>%
pull(id) ->idtorem
poolVP <- poolVP %>%
filter(!id %in% idtorem)
poolVP_id <- poolVP_id %>%
filter(!id %in% idtorem)
}
}else{ # method 2 with biiig filter
temp <- filters_neg_above_reduc %>%
mutate(filtre = map_chr(cmt,  ~ filters[[.x]][["above"]]))
for(a in all_param){
temp %>%
mutate(filtre = map2_chr(filtre, !!parse_expr(a), function(filtre, x){
gsub(paste0("ref\\$", a),x,  filtre)
})) -> temp
}
temp %>%
pull(filtre) -> filtres
if(length(filtres) > 0 ){
filtre_line <- paste0("(", filtres[47], ")") %>% paste0(collapse = "|")
poolVP_id %>%
mutate(test = !!parse_expr(filtre_line)) %>%
filter(test == T) %>% pull(id) ->idtorem
if(idtorem[idtorem %in%idsMissings] %>% sum > 0) stop("IDs missing ! ")
poolVP <- poolVP %>%
filter(! id %in% idtorem)
poolVP_id <- poolVP_id %>%
filter(! id %in% idtorem)
}
}
}
if(time_compteur == T) poolVP_compteur_new$TapplyRedFilterAbove <- difftime(Sys.time(),t02 , units = "s")
if(nrow(filters_neg_below_up_reduc)> 0){
# method 1 with loop
if(methodFilter == 1){
for(a in 1:nrow(filters_neg_below_up_reduc)){
ref <- filters_neg_below_up_reduc %>% slice(a)
poolVP_id %>%
mutate(test = !!parse_expr(filters[[ref$cmt]][["below"]])) %>%
filter(test == T) %>%
pull(id)  ->idtorem
poolVP <- poolVP %>%
filter(!id %in% idtorem)
poolVP_id <- poolVP_id %>%
filter(!id %in% idtorem)
}
}else{ # method 2 with biiig filter
temp <- filters_neg_below_up_reduc %>%
mutate(filtre = map_chr(cmt,  ~ filters[[.x]][["below"]]))
for(a in all_param){
temp %>%
mutate(filtre = map2_chr(filtre, !!parse_expr(a), function(filtre, x){
gsub(paste0("ref\\$", a),x,  filtre)
})) -> temp
}
temp %>%
pull(filtre) -> filtres
if(length(filtres) > 0 ){
filtre_line <- paste0("(", filtres[8], ")") %>% paste0(collapse = "|")
poolVP_id %>%
mutate(test = !!parse_expr(filtre_line)) %>%
filter(test == T) %>% pull(id) ->idtorem
idtorem[idtorem %in%idsMissings]
if(idtorem[idtorem %in%idsMissings] %>% sum > 0) stop("IDs missing ! ")
poolVP <- poolVP %>%
filter(! id %in% idtorem)
poolVP_id <- poolVP_id %>%
filter(! id %in% idtorem)
}
}
}
nrem <- nref -  nrow(poolVP)
time_filter_neg_apply <- difftime(Sys.time(), t02, units = "s")
nremoved_below_fil <-  nrow(poolVP)
if(time_compteur == T){
poolVP_compteur_new$TapplyRedFilterBoth <- time_filter_neg_apply
poolVP_compteur_new$TapplyRedFilterBelow <-      poolVP_compteur_new$TapplyRedFilterBoth -  poolVP_compteur_new$TapplyRedFilterAbove
poolVP_compteur_new$NremovedRedFilter <-   nrem
}
### Update filters
self$filters_neg_above <- bind_rows(self$filters_neg_above, filters_neg_above_reduc )
self$filters_neg_below <- bind_rows(self$filters_neg_below, filters_neg_below_up_reduc )
##### Compute the rendement of red filter and disable if negative
totaltimeredfilter <- time_filter_neg_apply + timefilternegabovemake + timefilternegbelowmake
totalsave <-  nrem * time_simulations /  n_simulations
if(time_compteur == T){
poolVP_compteur_new$TSavedRedFilter <- totalsave
poolVP_compteur_new$TimeTotalRedFilter <- totaltimeredfilter
}
if(totalsave < totaltimeredfilter){
message(red("\nRed filter system disabled."))
use_red_filter <- F
}
}# end use of red filter
# gree filter --------------------------------------------------------------
# dont use the freen filter if use_green_filter F
# OR if percentage green is below  pctActivGreen
if(use_green_filter == F | nrow(res2 %>% filter(be_up == T & ab_low== T)) < pctActivGreen * nrow(res2)  ){
if(time_compteur == T) t02 <- Sys.time()
targets_temp %>%
# filter(protocol == unique(line$protocol), cmt == cmtt) %>%
pull(time) %>% length -> nmax
res2 %>%
filter(be_up == 1 & ab_low == 1) %>%
group_by(id_origin) %>%
tally -> nabove
res2 %>%
left_join(nabove, by = "id_origin") %>%
filter(n == nmax) %>%
group_by(id_origin) %>%
slice(1) %>% pull(id_origin) -> idsgood
# line %>% filter(id %in% idsgood) %>% pull(id) -> idsgood
poolVP[poolVP$id %in% idsgood & poolVP$protocol == unique(line$protocol), col_to_add     ] <- 0
if(time_compteur == T)  poolVP_compteur_new$time_addgreennofil <- difftime(Sys.time(), t02, units = "s")
if(time_compteur == T) t02 <- Sys.time()
res %>%
left_join(line %>% distinct(id, id_origin), by = "id") %>%
filter(id_origin %in% idsgood) %>%
mutate(protocol = unique(line$protocol)) %>%
select(-id) %>%
rename(id = id_origin) %>%
group_by(id,protocol) %>%
nest() -> forjoin
siml[[n_compteur]] <-  forjoin#siml %>%
if(time_compteur == T) poolVP_compteur_new$timesimlandjoin <- difftime(Sys.time(), t02, units = "s")
}else {
t0greenfilter <- Sys.time()
donebeforegreen <- is.na(poolVP[, col_to_add]) %>% sum
for(cmtt in unique(self$targets$cmt)){
if(time_compteur == T){
aboveExpr <- parse_expr(paste0(cmtt, "_AL"))
belowExpr <- parse_expr(paste0(cmtt, "_BU"))
befusegreen <-   poolVP %>%
group_by(!!aboveExpr, !!belowExpr) %>%
tally
t0green   <- Sys.time()
}
# lines output below_up
if(time_compteur == T) t02 <- Sys.time()
self$targets %>%
filter(protocol == unique(line$protocol), cmt == cmtt) %>%
pull(time) %>% length -> nmax
res2 %>%
filter(be_up == 1 & ab_low == 1) %>%
group_by(id_origin) %>%
tally -> naccepted
res2 %>%
left_join(naccepted, by = "id_origin") %>%
filter(n == nmax) %>%
group_by(id_origin) %>%
slice(1) %>% pull(id_origin) -> idsaccepted
line %>% filter(id_origin %in% idsaccepted) -> filters_pos_below_up ->  filters_ps_above_lo
filters_pos_below_up$cmt = cmtt
filters_ps_above_lo$cmt = cmtt
# automatic desactivation if Inf or - Inf
below_green <- T
above_green <- T
if( nrow(self$targets %>%
filter(!(protocol == unique(res2$protocol) & cmt == cmtt & max == Inf))) == 0) below_green <- F
if( nrow(self$targets %>%filter(!(protocol == unique(res2$protocol) & cmt == cmtt & min == -Inf))) == 0 )  above_green <- F
if(below_green == T){
if(time_compteur == T) t03 <- Sys.time()
filters_pos_below_up_reduc <- filter_reduc(filters_pos_below_up,obj = self , direction  =  "below")
if(time_compteur == T) poolVP_compteur_new[paste0("Treduc_filter_green_below_", cmtt)] <- difftime(Sys.time(), t03, units = "s")
pos_below[[cmtt]] <- bind_rows(pos_below[[cmtt]], filters_pos_below_up_reduc[names(pos_below[[1]])])
if(time_compteur == T){
t02 <- Sys.time()
reff <- sum(is.na(poolVP[deparse(belowExpr)]))
}
if(nrow(filters_pos_below_up_reduc) >0){
for(a in 1:nrow(filters_pos_below_up_reduc)){
ref <- filters_pos_below_up_reduc %>% slice(a)
poolVP %>%
mutate(test = !!parse_expr(filters[[ref$cmt]][["below"]])) %>%
filter(test == T) %>% pull(id) -> id_temp
poolVP[[paste0(cmtt,"_BU")]][poolVP$id %in% id_temp & poolVP$protocol == unique(line$protocol)] <-  ref$rowid
}
if(time_compteur == T){
poolVP_compteur_new[paste0("TapplyGreenFilterBelow_", cmtt)] <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new[paste0("n_add_below_fil", cmtt)] <-   sum(is.na(poolVP[deparse(belowExpr)])) - reff
}
}
} # end if below green
if(above_green == T){
if(time_compteur == T) t03 <- Sys.time()
filters_ps_above_lo_reduc <- filter_reduc(filters_ps_above_lo,obj = self, direction = "above")
if(time_compteur == T) poolVP_compteur_new[paste0("Treduc_filter_green_above_", cmtt)] <- difftime(Sys.time(), t03, units = "s")
pos_above[[cmtt]] <- bind_rows(pos_above[[cmtt]], filters_ps_above_lo_reduc[names(pos_above[[1]])])
if(time_compteur == T){
t02 <- Sys.time()
reff <- sum(is.na(poolVP[[deparse(aboveExpr)]]))
}
if(nrow(filters_ps_above_lo_reduc) >0){
for(a in 1:nrow(filters_ps_above_lo_reduc)){
ref <- filters_ps_above_lo_reduc %>% slice(a)
poolVP %>%
mutate(test = !!parse_expr(filters[[ref$cmt]][["above"]])) %>%
filter(test == T) %>% pull(id) -> id_temp
poolVP[[paste0(cmtt,"_AL")]][poolVP$id %in% id_temp & poolVP$protocol == unique(line$protocol)] <- ref$rowid
}
}
if(time_compteur == T){
poolVP_compteur_new[[paste0("TapplyGreenFilterAbove_", cmtt)]] <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new[[paste0("n_add_above_fil_", cmtt)]] <-   sum(is.na(poolVP[[deparse(aboveExpr)]])) - reff
}
} # end if above green
# if(time_compteur == T){
#   poolVP_compteur_new$filter_pos_above <- difftime(Sys.time(), t02, units = "s")
#   poolVP_compteur_new$nfilter_pobe_bef <- nrow(filters_pos_below_up)
#   poolVP_compteur_new$nfilters_posbe_af <- nrow(filters_pos_below_up_reduc)
# }
# lines output bpostif above lo
# if(time_compteur == T) t02 <- Sys.time()
#
#
#
#
#
# if(time_compteur == T){
#   poolVP_compteur_new$filter_pos_above <- difftime(Sys.time(), t02, units = "s")
#   poolVP_compteur_new$nfilter_posab_bef <- nrow(filters_ps_above_lo)
#   poolVP_compteur_new$nfilters_posab_af <- nrow(filters_ps_above_lo_reduc)
# }
###### Use the filters
if(time_compteur == T){
afusegreen <-   poolVP %>%
group_by(!!aboveExpr, !!belowExpr) %>%
tally  %>%
rename(n2 = n)
left_join(afusegreen, befusegreen) %>%
mutate(Diff = n2 - n) %>%
mutate(colname = paste0(deparse(belowExpr), "-", deparse(aboveExpr))) -> temp3
for(a in 1:nrow(temp3)){
poolVP_compteur_new[temp3$colname[[a]]] <-  temp3$Diff[[a]]
}
poolVP_compteur_new$wholegreenfilter <- difftime(Sys.time(), t0green, units = "s")
}
if(time_compteur == T) t02 <- Sys.time()
res %>%
left_join(line %>% distinct(id, id_origin), by = "id") %>%
filter(id_origin %in% unique(poolVP$id) & !id_origin %in% siml$id) %>%
mutate(protocol = unique(line$protocol)) %>%
select(-id) %>% rename(id = id_origin) %>%
group_by(id,protocol) %>%
nest() -> forjoin
siml[[n_compteur]] <-  forjoin#sim
if(time_compteur == T) poolVP_compteur_new$timesimlandjoin <- difftime(Sys.time(), t02, units = "s")
# end for each compartment
}
timegreen <- difftime(Sys.time(), t0greenfilter, units = "s")
doneaftergreen <-   is.na(poolVP[, col_to_add]) %>% sum
equivVPdon <-  (donebeforegreen  - doneaftergreen)/ length(col_to_add)
totalsaveGreen <-  equivVPdon * time_simulations /  n_simulations
if(totalsaveGreen < timegreen){
message(green("\nGreen filter system disabled."))
use_green_filter <- F
}
if(time_compteur == T){
poolVP_compteur_new$TSavedGreenFilter <- totalsave
poolVP_compteur_new$TimeTotalGreenFilter <- timegreen
}
}# end use green filter
# if() siml <- tibble(id = integer(), protocoles = character(), simul= list())
if(time_compteur == T)  timesaver$poolVP_compteur <- bind_rows(timesaver$poolVP_compteur,poolVP_compteur_new)
# Compute newratio for knowing when to stop
newratio <- is.na(poolVP[, col_to_add]) %>% sum
# print(newratio)
}# fin while 1
res2
res2 %>% filter(value) < 0
allpct
allpct %>%
filter(tumVol < 0)
allpct %>%
filter(tumVol < _ 10)
allpct %>%
filter(tumVol < - 10)
allpct %>%
filter(ke >= 1 & Vd >= 184 & lambda0 >= 0.64 & lambda1 >= 87.6 & w0 >= 185 & k2 <= 8.2 & k1 == 0.5) %>%
filter(tumVol <3765) %>%
mutate(ref = if_else(ke == 1 & Vd == 184 & lambda0 == 0.64 & lambda1 == 87.6 & w0 == 185 & k2 == 8.2 & k1 == 0.5, 0, 1)) %>%
arrange(ref)
filtre_line
allpct %>%
# filter(ke <= 1 & Vd <= 4 & lambda0 <= 0.91 & lambda1 <= 120 & w0 <= 50 & k2 >= 4.6 & k1 == 0.5) %>%
filter(rowid %in% c(121094, idsMissings)) %>%
# filter(tumVol > 604) %>%
mutate(ref = if_else(ke == 1 & Vd == 4 & lambda0 == 0.91 & lambda1 == 120 & w0 == 50 & k2 == 4.6 & k1 == 0.5, 0, 1)) %>%
arrange(ref)
allpct %>%
filter(ke >= 1 & Vd >= 184 & lambda0 >= 0.64 & lambda1 >= 87.6 & w0 >= 185 & k2 <= 8.2 & k1 == 0.5) %>%
filter(tumVol <3765) %>%
mutate(ref = if_else(ke == 1 & Vd == 184 & lambda0 == 0.64 & lambda1 == 87.6 & w0 == 185 & k2 == 8.2 & k1 == 0.5, 0, 1)) %>%
arrange(ref)
allpct %>%
# filter(ke <= 1 & Vd <= 4 & lambda0 <= 0.91 & lambda1 <= 120 & w0 <= 50 & k2 >= 4.6 & k1 == 0.5) %>%
filter(rowid %in% c(121094, idsMissings)) %>%
# filter(tumVol > 604) %>%
mutate(ref = if_else(rowid == 121094 , 0, 1)) %>%
arrange(ref)
allpct %>%
filter(ke <= 1 & Vd <= 4 & lambda0 <= 0.91 & lambda1 <= 120 & w0 <= 50 & k2 >= 4.6 & k1 == 0.5) %>%
filter(rowid %in% c(121094, idsMissings)) %>%
# filter(tumVol > 604) %>%
mutate(ref = if_else(rowid == 121094 , 0, 1)) %>%
arrange(ref)
res2 %>%
left_join(line) %>%
filter(ke == 1 & Vd == 184 & lambda0 == 0.64 & lambda1 == 87.6 & w0 == 185 & k2 == 8.2 & k1 == 0.5)
res
res %>%
left_join(line) %>%
filter(id_origin == 121094 & tumVol >0.1) %>%
ggplot()+
geom_line(aes(time, tumVol))
res %>%
left_join(line) %>%
filter(id_origin == 121094 & tumVol >0.1)
res2 %>%
left_join(line) %>%
filter(id_origin == 121094 & tumVol >0.1)
res2 %>%
left_join(line)
res2 %>%
left_join(line) %>%
filter(id_origin == 121094)
res2 %>% filter(value) < 0
res2
res2 %>% filter(value < 0)
## Addition 04/05/22
analytical_problem <- res2 %>% filter(value < 0)
analytical_problem
## Addition 04/05/22
analytical_problem <-  res2 %>% filter(value < 0)
analytical_problem %>%
pull(id_origin) -> toLabelErrorAna
toLabelErrorAna
self$errorComputation
self$errorComputation %>%
bind_rows(toLabelErrorAna)
self$errorComputation
bind_rows(toLabelErrorAna)
toLabelErrorAna
self$errorComputation %>%
bind_rows(analytical_problem)
list_error_computation <- list()
list_error_computation <- list()
analytical_problem <-  res2 %>% filter(value < 0)
analytical_problem
analytical_problem
analytical_problem %>%
pull(id_origin) -> toLabelErrorAna
toLabelErrorAna
list_error_computation[[n_compteur]] <- analytical_problem
analytical_problem %>%
pull(id_origin) -> toLabelErrorAna
poolVP <- poolVP %>%
filter(! id %in% toLabelErrorAna)
poolVP_id <- poolVP_id %>%
filter(! id %in% toLabelErrorAna)
length(list_error_computation)
if(length(list_error_computation) > 0) self$errorComputation <-  bind_rows(list_error_computation)
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new()
self$set_targets(manual = target)
# determine new targets
quant <- ( 1-b)/2
prototemp <- target
prototemp$min <- quantile(alltumVol, probs = quant)
prototemp$max <- quantile(alltumVol, probs = 1 - quant)
b
b= 0.5
# determine new targets
quant <- ( 1-b)/2
prototemp <- target
prototemp$min <- quantile(alltumVol, probs = quant)
prototemp$max <- quantile(alltumVol, probs = 1 - quant)
self2 <- self$clone(deep = T)
self2$set_targets(manual = prototemp)
self3 <- self2$clone(deep = T)
set.seed(123)
self3$add_VP(time_compteur = T, cohort, use_green_filter = T, npersalve = 2000, pctActivGreen = 0.1)
self <- self3
tt <- self$timeTrack
total <-tt$tTOTAL
loop <- tt$poolVP_compteur %>%
mutate( Treduc_filter_neg_both  =  Treduc_filter_neg_below +  Treduc_filter_neg_above) %>%
mutate( RedFilter = TapplyRedFilterBoth + Treduc_filter_neg_both, RxODE = timemodel) %>%
mutate(patientRemovedperSec = as.double(NremovedRedFilter) / as.double((RedFilter + timemodel )),
refpatientRemovedperSec =  as.double(nsimul) / as.double((timemodel )))
if("Treduc_filter_green_below_tumVol" %in% names( tt$poolVP_compteur)){
loop <- loop %>%
mutate( Treduc_filter_pos_both  =  Treduc_filter_green_below_tumVol +  Treduc_filter_green_above_tumVol) %>%
mutate( TapplyGreenFilter  =  TapplyGreenFilterBelow_tumVol +  TapplyGreenFilterAbove_tumVol,
GreenFilter =  Treduc_filter_pos_both + TapplyGreenFilter)
}else{
loop <- loop %>%
mutate( Treduc_filter_pos_both  =  0) %>%
mutate( TapplyGreenFilter  =  0,
GreenFilter =  0)
}
loop
loop %>%
select(RedFilter, GreenFilter, RxODE) %>%
gather("step", "value") %>%
group_by(step) %>%
summarise(sum = sum(value, na.rm = T)) %>%
mutate(sum = as.double(sum)) -> TimeSimplified
TimeSimplified
TimeSimplified %>%
add_row(step = "Other", sum = as.numeric(total, units = "days") * (24 * 3600) - sum(TimeSimplified$sum))
total
20+9.72+2.89+16
self3 <- self2$clone(deep = T)
set.seed(123)
self3 <- self2$clone(deep = T)
set.seed(123)
self3$add_VP(time_compteur = T, cohort, use_green_filter = T, npersalve = 2000, pctActivGreen = 0.5)
