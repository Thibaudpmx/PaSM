tumVol <- X1 + X2 + X3 + X4
growth <- lambda0 *  max(X1,0)/((1 + (lambda0 * max(tumVol,0)/lambda1)^psi)^(1/psi))
X1(0) <- w0
d/dt(X1) <- max(growth,1e-10) - X1 * max(Conc,1E-10) * k2
d/dt(X2) <- X1 * max(Conc,1E-10) * k2 - k1 * X2
d/dt(X3) <- k1 * (X2 - X3)
d/dt(X4) <- k1 * (X3 - X4)
})
proto <- tibble(cmt = "Central", time = 0, amt = 50, evid = 1) %>%
bind_rows(crossing(cmt = "Central", time = seq(0,52,1), amt = 0, evid = 0)) # change the step, (0.01,0.1,1), you will see !
proto2 <- tibble(cmt = "Central", time = 0, amt = 50, evid = 1) %>%
bind_rows(crossing(cmt = "Central", time = seq(0,52,0.01), amt = 0, evid = 0)) # change the step, (0.01,0.1,1), you will see !
#
# id <- tibble(ke = 1, w0 = 50, k2 = 3.4, lambda0 = 0.859, Vd = 4, lambda1 = 63.4, k1 = 0.5, psi = 20)
#
# id2 <-  tibble(ke = 1, w0 = 50, k2 = 2.93, lambda0 = 1, Vd = 4, lambda1 = 86.1, k1 = 0.5, psi = 20)
res2 <- model$solve(id2, proto, c(X1 = 50)) %>%   as.tibble() %>% mutate(supposed = "step1") %>%
bind_rows(model$solve(id2, proto2, c(X1 = 50))%>% as.tibble() %>%  mutate(supposed = "step0.01"))
res2 %>%
ggplot()+
geom_line(aes(time, tumVol, col = supposed))+
scale_y_log10()
model <- model_RxODE <-  RxODE({
d/dt(Central) <- -ke *  max(Central,0)
Conc <- Central/Vd
tumVol <- X1 + X2 + X3 + X4
growth <- lambda0 *  max(X1,0)/((1 + (lambda0 * max(tumVol,0)/lambda1)^psi)^(1/psi))
X1(0) <- w0
d/dt(X1) <- max(growth,1e-10) - X1 * max(Conc,1E-10) * k2
d/dt(X2) <- X1 * max(Conc,0) * k2 - k1 * X2
d/dt(X3) <- k1 * (X2 - X3)
d/dt(X4) <- k1 * (X3 - X4)
})
proto <- tibble(cmt = "Central", time = 0, amt = 50, evid = 1) %>%
bind_rows(crossing(cmt = "Central", time = seq(0,52,1), amt = 0, evid = 0)) # change the step, (0.01,0.1,1), you will see !
proto2 <- tibble(cmt = "Central", time = 0, amt = 50, evid = 1) %>%
bind_rows(crossing(cmt = "Central", time = seq(0,52,0.01), amt = 0, evid = 0)) # change the step, (0.01,0.1,1), you will see !
#
# id <- tibble(ke = 1, w0 = 50, k2 = 3.4, lambda0 = 0.859, Vd = 4, lambda1 = 63.4, k1 = 0.5, psi = 20)
#
# id2 <-  tibble(ke = 1, w0 = 50, k2 = 2.93, lambda0 = 1, Vd = 4, lambda1 = 86.1, k1 = 0.5, psi = 20)
res2 <- model$solve(id2, proto, c(X1 = 50)) %>%   as.tibble() %>% mutate(supposed = "step1") %>%
bind_rows(model$solve(id2, proto2, c(X1 = 50))%>% as.tibble() %>%  mutate(supposed = "step0.01"))
res2 %>%
ggplot()+
geom_line(aes(time, tumVol, col = supposed))+
scale_y_log10()
model <- model_RxODE <-  RxODE({
d/dt(Central) <- -ke *  max(Central,0)
Conc <- Central/Vd
tumVol <- X1 + X2 + X3 + X4
growth <- lambda0 *  max(X1,0)/((1 + (lambda0 * max(tumVol,0)/lambda1)^psi)^(1/psi))
X1(0) <- w0
d/dt(X1) <- max(growth,0) - X1 * max(Conc,1E-10) * k2
d/dt(X2) <- X1 * max(Conc,1E-10) * k2 - k1 * X2
d/dt(X3) <- k1 * (X2 - X3)
d/dt(X4) <- k1 * (X3 - X4)
})
proto <- tibble(cmt = "Central", time = 0, amt = 50, evid = 1) %>%
bind_rows(crossing(cmt = "Central", time = seq(0,52,1), amt = 0, evid = 0)) # change the step, (0.01,0.1,1), you will see !
proto2 <- tibble(cmt = "Central", time = 0, amt = 50, evid = 1) %>%
bind_rows(crossing(cmt = "Central", time = seq(0,52,0.01), amt = 0, evid = 0)) # change the step, (0.01,0.1,1), you will see !
#
# id <- tibble(ke = 1, w0 = 50, k2 = 3.4, lambda0 = 0.859, Vd = 4, lambda1 = 63.4, k1 = 0.5, psi = 20)
#
# id2 <-  tibble(ke = 1, w0 = 50, k2 = 2.93, lambda0 = 1, Vd = 4, lambda1 = 86.1, k1 = 0.5, psi = 20)
res2 <- model$solve(id2, proto, c(X1 = 50)) %>%   as.tibble() %>% mutate(supposed = "step1") %>%
bind_rows(model$solve(id2, proto2, c(X1 = 50))%>% as.tibble() %>%  mutate(supposed = "step0.01"))
res2 %>%
ggplot()+
geom_line(aes(time, tumVol, col = supposed))+
scale_y_log10()
allTimes %>%
mutate(pct = as.double(pct)) %>%
ggplot()+
geom_point(aes(x = (1-pct), y = nsimul, col = nparam))+
geom_line(aes(x = (1-pct), y = nsimul, col = nparam))+
geom_hline(data = ref, aes(yintercept = min), lty = 1)+
geom_hline(data = ref, aes(yintercept = max), lty = 1)+
geom_rect(data = ref, aes(xmin = -Inf, xmax = Inf, ymin = min, ymax =  max), lty = 1,alpha = 0.2)+
geom_hline(data = ref, aes(yintercept = median), lty = 2)+
# geom_hline(yintercept =  16.7)+
# geom_errorbar(data = ref, aes(x = 0, ymin = min, ymax = max))+
theme_bw()
allTimes %>%
mutate(pct = as.double(pct)) %>%
ggplot()+
geom_point(aes(x = (1-pct), y = timeTotal, col = nparam))+
geom_line(aes(x = (1-pct), y = timeTotal, col = nparam))+
geom_hline(data = ref, aes(yintercept = min), lty = 1)+
geom_hline(data = ref, aes(yintercept = max), lty = 1)+
geom_rect(data = ref, aes(xmin = -Inf, xmax = Inf, ymin = min, ymax =  max), lty = 1,alpha = 0.2)+
geom_hline(data = ref, aes(yintercept = median), lty = 2)+
# geom_hline(yintercept =  16.7)+
# geom_errorbar(data = ref, aes(x = 0, ymin = min, ymax = max))+
theme_bw()
for(a in 1:5){
print(a)
cohort <- cohort_creator(nmodif = a)
self <- VP_proj_creator$new()
self$set_targets(manual = target)
namepct <- paste0("simulAlln_",a, "_proto_1_cmt_1_time1.RDS")
if(!file.exists(namepct)){
self2 <- self$clone(deep = T)
self2$add_VP(cohort, use_green_filter = F, npersalve = 2000)
self2$poolVP %>%
unnest(simul) %>%
filter(time %in% target$time) %>%
saveRDS(file = namepct )
rm(self2)
}
allpct <- readRDS(namepct)
alltumVol <- allpct %>% pull(tumVol)
for(b in pcttargets){
newnames <- paste0("tRG_n",a,"_", b, "pct_proto_1_cmt_1_time1.RDS")
newnamessingle <-  paste0("SingletRG_n",a,"_", b, "pct_proto_1_cmt_1_time1.RDS")
if(!file.exists(newnamessingle)){
# determine new targets
quant <- ( 1-b)/2
prototemp <- target
prototemp$min <- quantile(alltumVol, probs = quant)
prototemp$max <- quantile(alltumVol, probs = 1 - quant)
self2 <- self$clone(deep = T)
self2$set_targets(manual = prototemp)
self3 <- self2$clone(deep = T)
set.seed(123)
self3$add_VP(time_compteur = T, cohort, use_green_filter = T, npersalve = 2000, pctActivGreen = 0.8)
saveRDS(self3, file = newnamessingle)
}
#   if(!file.exists(newnames)){
#   # determine new targets
#   quant <- ( 1-b)/2
#   prototemp <- target
#   prototemp$min <- quantile(alltumVol, probs = quant)
#   prototemp$max <- quantile(alltumVol, probs = 1 - quant)
#
#
# self2 <- self$clone(deep = T)
# self2$set_targets(manual = prototemp)
#
# test <- function(){
#   self3 <- self2$clone(deep = T)
#   self3$add_VP(cohort, use_green_filter = T, npersalve = 2000, pctActivGreen = 0.1)
# }
#
# mbref <- microbenchmark(test(), times = 5)
#
# saveRDS(mbref, newnames)
#   }
}# end for pcttargets
}
readRDS("D:/these/Second_project/QSP/modeling_work/VT_simeoni/article_QSPVP/data/Simeoni/SingletRG_n4_0.5pct_proto_1_cmt_1_time1.RDS")
readRDS("D:/these/Second_project/QSP/modeling_work/VT_simeoni/article_QSPVP/data/Simeoni/SingletRG_n4_0.5pct_proto_1_cmt_1_time1.RDS")$timeTrack
for(a in 1:5){
print(a)
cohort <- cohort_creator(nmodif = a)
self <- VP_proj_creator$new()
self$set_targets(manual = target)
namepct <- paste0("simulAlln_",a, "_proto_1_cmt_1_time1.RDS")
if(!file.exists(namepct)){
self2 <- self$clone(deep = T)
self2$add_VP(cohort, use_green_filter = F, npersalve = 2000)
self2$poolVP %>%
unnest(simul) %>%
filter(time %in% target$time) %>%
saveRDS(file = namepct )
rm(self2)
}
allpct <- readRDS(namepct)
alltumVol <- allpct %>% pull(tumVol)
for(b in pcttargets){
newnames <- paste0("tRG_n",a,"_", b, "pct_proto_1_cmt_1_time1.RDS")
newnamessingle <-  paste0("SingletRG_n",a,"_", b, "pct_proto_1_cmt_1_time1.RDS")
if(!file.exists(newnamessingle)){
# determine new targets
quant <- ( 1-b)/2
prototemp <- target
prototemp$min <- quantile(alltumVol, probs = quant)
prototemp$max <- quantile(alltumVol, probs = 1 - quant)
self2 <- self$clone(deep = T)
self2$set_targets(manual = prototemp)
self3 <- self2$clone(deep = T)
set.seed(123)
self3$add_VP(time_compteur = T, cohort, use_green_filter = T, npersalve = 2000, pctActivGreen = 0.8)
saveRDS(self3, file = newnamessingle)
}
#   if(!file.exists(newnames)){
#   # determine new targets
#   quant <- ( 1-b)/2
#   prototemp <- target
#   prototemp$min <- quantile(alltumVol, probs = quant)
#   prototemp$max <- quantile(alltumVol, probs = 1 - quant)
#
#
# self2 <- self$clone(deep = T)
# self2$set_targets(manual = prototemp)
#
# test <- function(){
#   self3 <- self2$clone(deep = T)
#   self3$add_VP(cohort, use_green_filter = T, npersalve = 2000, pctActivGreen = 0.1)
# }
#
# mbref <- microbenchmark(test(), times = 5)
#
# saveRDS(mbref, newnames)
#   }
}# end for pcttargets
}
files <- list.files("D:/these/Second_project/QSP/modeling_work/VT_simeoni/article_QSPVP/data/Simeoni")
toread <- files[grep("^SingletRG_n", files)]
x <- "SingletRG_n1_0.01pct_proto_1_cmt_1_time1.RDS"
tibble(a = toread) %>%
mutate(b = gsub("SingletRG_n", "", a )) %>%
mutate(nparam = gsub("_.+", "", b)) %>%
mutate(b = gsub("^._", "", b)) %>%
mutate(pct  = gsub("pct.+", "", b)) %>%
select(-b) %>%
# slice(1:10) %>%
mutate(results = map(a, function(x){
obj <- readRDS(x)
timetable(obj) %>%
spread(step, sum) %>%
mutate(VPfound= obj$poolVP %>% nrow, nsimul = obj$timeTrack$poolVP_compteur %>% pull(nsimul) %>% sum,
timeTotal = obj$timeTrack$tTOTAL)
})) %>%
unnest() %>%
select(-a) %>%
saveRDS("full_analysis.RDS")
allTimes <- readRDS("full_analysis.RDS")
allTimes
allTimes %>%
mutate(pct = as.double(pct)) %>%
ggplot()+
geom_point(aes(x = (1-pct), y = nsimul, col = nparam))+
geom_line(aes(x = (1-pct), y = nsimul, col = nparam))+
geom_hline(data = ref, aes(yintercept = min), lty = 1)+
geom_hline(data = ref, aes(yintercept = max), lty = 1)+
geom_rect(data = ref, aes(xmin = -Inf, xmax = Inf, ymin = min, ymax =  max), lty = 1,alpha = 0.2)+
geom_hline(data = ref, aes(yintercept = median), lty = 2)+
# geom_hline(yintercept =  16.7)+
# geom_errorbar(data = ref, aes(x = 0, ymin = min, ymax = max))+
theme_bw()
allTimes %>%
mutate(pct = as.double(pct)) %>%
ggplot()+
geom_point(aes(x = (1-pct), y = timeTotal, col = nparam))+
geom_line(aes(x = (1-pct), y = timeTotal, col = nparam))+
geom_hline(data = ref, aes(yintercept = min), lty = 1)+
geom_hline(data = ref, aes(yintercept = max), lty = 1)+
geom_rect(data = ref, aes(xmin = -Inf, xmax = Inf, ymin = min, ymax =  max), lty = 1,alpha = 0.2)+
geom_hline(data = ref, aes(yintercept = median), lty = 2)+
# geom_hline(yintercept =  16.7)+
# geom_errorbar(data = ref, aes(x = 0, ymin = min, ymax = max))+
theme_bw()
allTimes %>%
filter(! VPfound %in% c(2000,25000,50000,100000,150000,0,200000))
allTimes
allTimes %>%
summarise(min(timeTotal),max(timeTotal), median(timeTotal))
allTimes
allTimes %>%
mutate(timeTotal = as.double(timeTotal))
library(peccary)
allTimes <- readRDS("full_analysis.RDS")
setwd("D:/these/Second_project/QSP/modeling_work/VT_simeoni/article_QSPVP/data/Simeoni")
library(peccary)
library(QSPVP)
library(RxODE)
library(progress)
library(R6)
library(crayon)
library(profvis)
library(microbenchmark)
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
allTimes <- readRDS("full_analysis.RDS")
allTimes %>%
mutate(timeTotal = as.double(timeTotal))
allTimes %>%
mutate(timeTotal = as.double(timeTotal)) %>%
summarise(min(timeTotal),max(timeTotal), median(timeTotal))
allTimes
allTimes %>%
mutate(pct = (200000-nsimul) / 200000)
allTimes %>%
mutate(timeTotal = as.double(timeTotal)) %>%
mutate(pct = (200000-nsimul) / 200000) %>%
summarise(minT = min(timeTotal), maxT = max(timeTotal),medianT =  median(timeTotal),
minpct = min(pct), maxpct = max(pct),medianpct =  median(pct))
allTimes
allTimes %>%
filter(nparam >1) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
mutate(pct = (200000-nsimul) / 200000) %>%
summarise(minT = min(timeTotal), maxT = max(timeTotal),medianT =  median(timeTotal),
minpct = min(pct), maxpct = max(pct),medianpct =  median(pct))
allTimes
allTimes %>%
filter(nparam >1) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
mutate(pct = (200000-nsimul) / 200000) %>%
mutate(timeExtra = GreenFilter + RedFilter) %>%
summarise(minT = min(timeTotal), maxT = max(timeTotal),medianT =  median(timeTotal),
minpct = min(pct), maxpct = max(pct),medianpct =  median(pct),
mintimeExtra= min(timeExtra), maxtimeExtra = max(timeExtra),mediantimeExtra=  median(timeExtra))
200000*0.34
allTimes
allTimes
cor.test(as.double(allTimes$nparam), as.double(allTimes$nparam %>% as.double ), method=c("pearson", "kendall", "spearman"))
# Correlation nparam and time extrapolation
cor.test(as.double(allTimes$nparam), as.double(allTimes$GreenFilter %>% as.double ), method=c("pearson", "kendall", "spearman"))
# Correlation nparam and time extrapolation
cor.test(as.double(allTimes$nparam), as.double((allTimes$GreenFilter + allTimes$RedFilter) %>% as.double ), method=c("pearson", "kendall", "spearman"))
# Correlation nparam and nsimul
cor.test(as.double(allTimes$nparam), allTimes$nsimul , method=c("pearson", "kendall", "spearman"))
allTimes %>%
ggplot()+
geom_point(aes(nparam, nsimul))
# Correlation nparam and nsimul
cor.test(as.double(allTimes$nparam), allTimes$nsimul , method=c("pearson", "kendall", "spearman"))
allTimes
# Correlation pct rejetcion and time
allTimes
# Correlation pct rejetcion and time
allTimes %>%
filter(pct == 0.01,0.5)
# Correlation pct rejetcion and time
allTimes %>%
filter(pct %in% c(0.01,0.5))
# Correlation pct rejetcion and time
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
select(pct, nparam, timeTotal) %>%
mutate(timeTotal = as.double(timeTotal))
# Correlation pct rejetcion and time
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
select(pct, nparam, timeTotal) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
spread(nparam, timeTotal)
# Correlation pct rejetcion and time
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
select(pct, nparam, timeTotal) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
spread(nparam, pct)
# Correlation pct rejetcion and time
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
select(pct, nparam, timeTotal) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
spread(pct , timeTotal)
# Correlation pct rejetcion and time
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
select(pct, nparam, timeTotal) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
spread(pct , timeTotal) -> forwilcox
# Correlation pct rejetcion and time
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
select(pct, nparam, timeTotal) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
spread(pct , timeTotal) -> forwilcoxowvsmed
rwilcox.test(forwilcoxowvsmed$`0.01`, forwilcoxowvsmed$`0.5`, paired = TRUE)
wilcox.test(forwilcoxowvsmed$`0.01`, forwilcoxowvsmed$`0.5`, paired = TRUE)
# Correlation pct rejetcion and time
allTimes %>%
filter(pct %in% c(0.01,0.5,0.75)) %>%
select(pct, nparam, timeTotal) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
spread(pct , timeTotal) -> forwilcoxowvsmed
wilcox.test(forwilcoxowvsmed$`0.01`, forwilcoxowvsmed$`0.5`, paired = TRUE)
wilcox.test(forwilcoxowvsmed$`0.01`, forwilcoxowvsmed$`0.75`, paired = TRUE)
View(allTimes)
allTimes
# Correlation pct rejetcion and time
allTimes %>%
filter(pct %in% c(0.01,0.5,0.75)) %>%
select(pct, nparam, timeTotal) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
spread(pct , timeTotal) %>%
filter(nparam !=1)-> forwilcoxowvsmed
wilcox.test(forwilcoxowvsmed$`0.01`, forwilcoxowvsmed$`0.5`, paired = TRUE)
# Correlation pct rejetcion and time
allTimes %>%
filter(pct %in% c(0.01,0.5,0.75)) %>%
select(pct, nparam, timeTotal) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
spread(pct , timeTotal)  -> forwilcoxowvsmed
allTimes %>%
filter(nparam >1) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
mutate(pct = (200000-nsimul) / 200000) %>%
mutate(timeExtra = GreenFilter + RedFilter) %>%
summarise(minT = min(timeTotal), maxT = max(timeTotal),medianT =  median(timeTotal),
minpct = min(pct), maxpct = max(pct),medianpct =  median(pct),
mintimeExtra= min(timeExtra), maxtimeExtra = max(timeExtra),mediantimeExtra=  median(timeExtra))
allTimes
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
ggplot()+
geom_boxplot(aes(factor(pct), as.double(timeTotal)))
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
ggplot()+
geom_boxplot(aes(factor(pct), as.double(timeTotal)))+
geom_line(aes(factor(pct), as.double(timeTotal), group = nparam))
forwilcoxowvsmed
t.test(forwilcoxowvsmed$`0.01`, forwilcoxowvsmed$`0.5`, paired = TRUE)
wilcox.test(forwilcoxowvsmed$`0.01`, forwilcoxowvsmed$`0.5`, paired = TRUE)
allTimes %>%
filter(pct %in% c(0.5,1)) %>%
select(pct, nparam, timeTotal) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
spread(pct , timeTotal)  -> forwilcoxmedvshigh
forwilcoxmedvshigh
wilcox.test(forwilcoxowvsmed$`1`, forwilcoxowvsmed$`0.5`, paired = TRUE)
allTimes %>%
filter(pct %in% c(0.5,1)) %>%
select(pct, nparam, timeTotal) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
spread(pct , timeTotal)  -> forwilcoxmedvshigh
wilcox.test(forwilcoxmedvshigh$`1`, forwilcoxmedvshigh$`0.5`, paired = TRUE)
forwilcoxmedvshigh
# Correlation pct rejetcion and time
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
select(pct, nparam, timeTotal) %>%
mutate(timeTotal = as.double(timeTotal)) %>%
spread(pct , timeTotal)  -> forwilcoxowvsmed
names(forwilcoxowvsmed) <- c("nparam", "lowhigh", "medium")
forwilcoxowvsmed
forwilcoxmedvshigh
names(forwilcoxmedvshigh) <- c("nparam",  "medium","lowhigh",)
names(forwilcoxmedvshigh) <- c("nparam",  "medium","lowhigh")
combined <- bind_rows(forwilcoxmedvshigh, forwilcoxowvsmed)
wilcox.test(forwilcoxmedvshigh$lowhigh, forwilcoxmedvshigh$medium, paired = TRUE)
combined <- bind_rows(forwilcoxmedvshigh, forwilcoxowvsmed)
wilcox.test(combined$lowhigh, combined$medium, paired = TRUE)
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
ggplot()+
geom_boxplot(aes(factor(pct), as.double(timeTotal)))+
geom_line(aes(factor(pct), as.double(timeTotal), group = nparam))
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
select(pct, nparam, timeTotal)
# Correlation pct rejetcion and nsimul
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
select(pct, nparam, nsimul) %>%
mutate(nsimul = as.double(nsimul)) %>%
spread(pct , nsimul)  -> forwilcoxowvsmed
names(forwilcoxowvsmed) <- c("nparam", "lowhigh", "medium")
wilcox.test(forwilcoxowvsmed$lowhigh, forwilcoxowvsmed$medium, paired = TRUE)
allTimes %>%
filter(pct %in% c(0.5,1)) %>%
select(pct, nparam, nsimul) %>%
mutate(nsimul = as.double(nsimul)) %>%
spread(pct , nsimul)  -> forwilcoxmedvshigh
names(forwilcoxmedvshigh) <- c("nparam",  "medium","lowhigh")
wilcox.test(forwilcoxmedvshigh$lowhigh, forwilcoxmedvshigh$medium, paired = TRUE)
combined <- bind_rows(forwilcoxmedvshigh, forwilcoxowvsmed)
wilcox.test(combined$lowhigh, combined$medium, paired = TRUE)
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
select(pct, nparam,  GreenFilter, RedFilter) %>%
mutate(nsimul = as.double( GreenFilter + RedFilter)) %>%
spread(pct , nsimul)  -> forwilcoxowvsmed
names(forwilcoxowvsmed) <- c("nparam", "lowhigh", "medium")
wilcox.test(forwilcoxowvsmed$lowhigh, forwilcoxowvsmed$medium, paired = TRUE)
allTimes
allTimes %>%
filter(pct %in% c(0.01,0.5))
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
select(pct, nparam,  GreenFilter, RedFilter) %>%
mutate(nsimul = as.double( GreenFilter + RedFilter))
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
select(pct, nparam,  GreenFilter, RedFilter) %>%
mutate(nsimul = as.double( GreenFilter + RedFilter)) %>%
select(-GreenFilter, - RedFilter) %>%
spread(pct , nsimul)  -> forwilcoxowvsmed
names(forwilcoxowvsmed) <- c("nparam", "lowhigh", "medium")
wilcox.test(forwilcoxowvsmed$lowhigh, forwilcoxowvsmed$medium, paired = TRUE)
forwilcoxowvsmed
allTimes %>%
filter(pct %in% c(1,0.5)) %>%
select(pct, nparam,  GreenFilter, RedFilter) %>%
mutate(nsimul = as.double( GreenFilter + RedFilter)) %>%
select(-GreenFilter, - RedFilter) %>%
spread(pct , nsimul)  -> forwilcoxowvsmed
names(forwilcoxowvsmed) <- c("nparam", "lowhigh", "medium")
wilcox.test(forwilcoxowvsmed$lowhigh, forwilcoxowvsmed$medium, paired = TRUE)
allTimes %>%
filter(pct %in% c(0.01,0.5)) %>%
select(pct, nparam,  GreenFilter, RedFilter) %>%
mutate(nsimul = as.double( GreenFilter + RedFilter)) %>%
select(-GreenFilter, - RedFilter) %>%
spread(pct , nsimul)  -> forwilcoxowvsmed
names(forwilcoxowvsmed) <- c("nparam", "lowhigh", "medium")
wilcox.test(forwilcoxowvsmed$lowhigh, forwilcoxowvsmed$medium, paired = TRUE)
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
wordcountaddin:::text_stats()
