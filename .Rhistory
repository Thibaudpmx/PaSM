time_simulations <- Sys.time()
b <- Sys.time()
res <- simulations2(ind_param = line, add_events = protocol, returnSim = T,
icmt = self$initial_cmt_values, time_vec =self$times,
pardf = self$parameters_default_values, model = self$model) %>%
as_tibble() # %>%
# get back the real id
# left_join(line %>% distinct(id, id_origin), by = "id") %>%
# select(-id) %>%
# rename(id = id_origin)
time_simulations <-  difftime(Sys.time(), b, units = "s")
n_simulations <-  nrow(line)
if(time_compteur == T){
poolVP_compteur_new$timemodel <- time_simulations
poolVP_compteur_new$nsimul <- n_simulations
}
if(time_compteur == T) t02 <- Sys.time()
# # get targets for this patients
targets_temp <- self$targets %>%
filter(protocol == unique(line$protocol))#%>%
print("before res2")
# # Compute the tests
res2 <- res %>%
gather("cmt", "value", unique(targets_temp$cmt)) %>%
filter(time %in% targets_temp$time) %>%
left_join( targets_temp, by = c("time", "cmt")) %>%
filter(!is.na(min)) %>%
mutate(be_up = value <= max) %>%
mutate(ab_low = value >= min) %>%
left_join(line %>% distinct(id, id_origin), by = c("id"))
# Red filter --------------------------------------------------------------
# If no red filter
if(use_red_filter == F){
t02 <- Sys.time()
res2 %>%
# left_join(line %>% distinct(id, id), by  = "id") %>%
filter(be_up == F | ab_low == F) %>%
pull(id_origin) %>%
unique -> idstorem
if(keepRedFiltaftDis == T){
newfilters <- res2 %>%
filter(be_up == F) %>%
distinct(id, cmt) %>%
left_join(line, by  = "id") %>%
distinct(!!!parse_exprs(all_param), cmt,id)
self$filters_neg_above <- bind_rows(self$filters_neg_above %>% mutate(PrimFilter = T) ,
newfilters )
newfilters <- res2 %>%
filter( ab_low == F) %>%
left_join(line, by  = "id") %>%
# filter( id %in% idstorem) %>%
distinct(!!!parse_exprs(all_param), cmt,id)
self$filters_neg_below <- bind_rows(self$filters_neg_below %>% mutate(PrimFilter = T), newfilters )
}
poolVP <- poolVP %>%
filter(! id %in% idstorem)
poolVP_id <- poolVP_id %>%
filter(! id %in% idstorem)
difftime(Sys.time(), t02, units = "s")
}else
{
# if red filter
if(time_compteur == T) poolVP_compteur_new[paste0("res2_", cmtt)] <- difftime(Sys.time(), t02, units = "s")
##### Remove patients neg  and compute red filters if activated ########
# lines output neg_ below
if(time_compteur == T) t02 <- Sys.time()
t0filternegbelow <- Sys.time()
res2 %>%
filter(ab_low == 0) %>%
group_by(id_origin, cmt) %>%
slice(1) %>% ungroup() -> idsbelow
filters_neg_below <- idsbelow %>%
left_join(line,by = c("id", "protocol", "id_origin")) %>%
select(!!!parse_exprs(all_param), "cmt","id", "id_origin")
if(nrow(filters_neg_below) > 0){
filters_neg_below_up_reduc <- filter_reduc(df = filters_neg_below ,obj = self, direction = "below")
}else{
filters_neg_below_up_reduc <- filters_neg_below
}
if(time_compteur == T){
poolVP_compteur_new$filter_neg_below <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new$nfilter_negbel_bef <- nrow(filters_neg_below)
poolVP_compteur_new$nfilters_negbel_af <- nrow(filters_neg_below_up_reduc)
}
#
timefilternegbelowmake <- difftime(Sys.time(),t0filternegbelow , units = "s")
# lines output neg_ above
if(time_compteur == T) t02 <- Sys.time()
t0filternegabovemake <- Sys.time()
res2 %>%
filter(be_up == 0) %>%
group_by(id, cmt) %>%
slice(1) %>% ungroup() ->idsabove
filters_neg_above <-  idsabove %>%
left_join(line,by = c("id", "protocol", "id_origin")) %>%
select(!!!parse_exprs(all_param), "cmt" , "id", "id_origin")
if(nrow(filters_neg_above) > 0){
filters_neg_above_reduc <- filter_reduc(filters_neg_above ,obj = self, direction =  "above")
}else{
filters_neg_above_reduc <- filters_neg_above
}
if(time_compteur == T){
poolVP_compteur_new$filter_neg_above <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new$nfilter_negab_bef <- nrow(filters_neg_above)
poolVP_compteur_new$nfilters_negab_af <- nrow(filters_neg_above_reduc)
}
timefilternegabovemake <- difftime(Sys.time(),t0filternegabovemake , units = "s")
if(time_compteur == T) t02 <- Sys.time()
## We remove all the one not accepted
poolVP <- poolVP %>%
filter(! id %in% c(unique(filters_neg_above$id_origin, unique(filters_neg_below$id_origin))))
# which(c(unique(filters_neg_above$id_origin, unique(filters_neg_below$id_origin))) %in% poolVP$id[!is.na(poolVP$tumVol_BU)])
poolVP_id <- poolVP_id %>%
filter(! id %in% c(unique(filters_neg_above$id_origin, unique(filters_neg_below$id_origin))))
#### Apply red filter if activated
t02 <- Sys.time()
nref <- nrow(poolVP)
if(time_compteur == T){
t02 <- t02
nref <- nref
}
if(nrow(filters_neg_above_reduc) > 0){
# method 1 with loop
if(methodFilter == 1){
for(a in 1:nrow(filters_neg_above_reduc)){
ref <- filters_neg_above_reduc %>% slice(a)
poolVP_id %>%
mutate(test = !!parse_expr(filters[[ref$cmt]][["above"]])) %>%
filter(test == T) %>%
pull(id) ->idtorem
poolVP <- poolVP %>%
filter(!id %in% idtorem)
poolVP_id <- poolVP_id %>%
filter(!id %in% idtorem)
}
}else{ # method 2 with biiig filter
temp <- filters_neg_above_reduc %>%
mutate(filtre = map_chr(cmt,  ~ filters[[.x]][["above"]]))
for(a in all_param){
temp %>%
mutate(filtre = map2_chr(filtre, !!parse_expr(a), function(filtre, x){
gsub(paste0("ref\\$", a),x,  filtre)
})) -> temp
}
temp %>%
pull(filtre) -> filtres
if(length(filtres) > 0 ){
filtre_line <- paste0("(", filtres, ")") %>% paste0(collapse = "|")
poolVP_id %>%
mutate(test = !!parse_expr(filtre_line)) %>%
filter(test == T) %>% pull(id) ->idtorem
if(length(which(idtorem %in% poolVP$id[!is.na(poolVP$tumVol_BU)])) >0) stop()
poolVP <- poolVP %>%
filter(! id %in% idtorem)
poolVP_id <- poolVP_id %>%
filter(! id %in% idtorem)
}
}
}
if(time_compteur == T){
poolVP_compteur_new$remneg_above_fil <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new$nremoved_above_fil <-   nref - nrow(poolVP)
}
if(nrow(filters_neg_below_up_reduc)> 0){
# method 1 with loop
if(methodFilter == 1){
for(a in 1:nrow(filters_neg_below_up_reduc)){
ref <- filters_neg_below_up_reduc %>% slice(a)
poolVP_id %>%
mutate(test = !!parse_expr(filters[[ref$cmt]][["below"]])) %>%
filter(test == T) %>%
pull(id)  ->idtorem
poolVP <- poolVP %>%
filter(!id %in% idtorem)
poolVP_id <- poolVP_id %>%
filter(!id %in% idtorem)
}
}else{ # method 2 with biiig filter
temp <- filters_neg_below_up_reduc %>%
mutate(filtre = map_chr(cmt,  ~ filters[[.x]][["below"]]))
for(a in all_param){
temp %>%
mutate(filtre = map2_chr(filtre, !!parse_expr(a), function(filtre, x){
gsub(paste0("ref\\$", a),x,  filtre)
})) -> temp
}
temp %>%
pull(filtre) -> filtres
if(length(filtres) > 0 ){
filtre_line <- paste0("(", filtres, ")") %>% paste0(collapse = "|")
poolVP_id %>%
mutate(test = !!parse_expr(filtre_line)) %>%
filter(test == T) %>% pull(id) ->idtorem
poolVP <- poolVP %>%
filter(! id %in% idtorem)
poolVP_id <- poolVP_id %>%
filter(! id %in% idtorem)
}
}
}
if(time_compteur == T){
poolVP_compteur_new$remneg_below_fil <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new$nremoved_below_fil <-   nref - nrow(poolVP)
}
nrem <- nref -  nrow(poolVP)
time_filter_neg_apply <- difftime(Sys.time(), t02, units = "s")
nremoved_below_fil <-  nrow(poolVP)
if(time_compteur == T){
poolVP_compteur_new$remneg_below_fil <- time_filter_neg_above_apply
poolVP_compteur_new$nremoved_below_fil <- nremoved_below_fil
}
### Update filters
self$filters_neg_above <- bind_rows(self$filters_neg_above %>% mutate(PrimFilter = T) , filters_neg_above_reduc )
self$filters_neg_below <- bind_rows(self$filters_neg_below %>% mutate(PrimFilter = T) , filters_neg_below_up_reduc )
##### Compute the rendement of red filter and disable if negative
totaltimeredfilter <- time_filter_neg_apply + timefilternegabovemake + timefilternegbelowmake
totalsave <-  nrem * time_simulations /  n_simulations
if(totalsave < totaltimeredfilter){
message(red("\nRed filter system disabled."))
use_red_filter <- F
}
}# end use of red filter
# gree filter --------------------------------------------------------------
if(use_green_filter == F | nrow(res2 %>% filter(be_up == T & ab_low== T)) < pctActivGreen * nrow(res2)  ){
if(time_compteur == T) t02 <- Sys.time()
targets_temp %>%
# filter(protocol == unique(line$protocol), cmt == cmtt) %>%
pull(time) %>% length -> nmax
res2 %>%
filter(be_up == 1 & ab_low == 1) %>%
group_by(id_origin) %>%
tally -> nabove
res2 %>%
left_join(nabove, by = "id_origin") %>%
filter(n == nmax) %>%
group_by(id_origin) %>%
slice(1) %>% pull(id_origin) -> idsgood
# line %>% filter(id %in% idsgood) %>% pull(id) -> idsgood
poolVP[poolVP$id %in% idsgood & poolVP$protocol == unique(line$protocol), col_to_add     ] <- T
if(time_compteur == T)  poolVP_compteur_new$time_addgreennofil <- difftime(Sys.time(), t02, units = "s")
if(time_compteur == T) t02 <- Sys.time()
res %>%
left_join(line %>% distinct(id, id_origin), by = "id") %>%
filter(id_origin %in% idsgood) %>%
mutate(protocol = unique(line$protocol)) %>%
select(-id) %>%
rename(id = id_origin) %>%
group_by(id,protocol) %>%
nest() -> forjoin
siml <- siml %>%
bind_rows(forjoin)
if(time_compteur == T) poolVP_compteur_new$timesimlandjoin <- difftime(Sys.time(), t02, units = "s")
}else {
for(cmtt in unique(self$targets$cmt)){
if(time_compteur == T){
befusegreen <-   poolVP %>%
group_by(tumVol_BU, tumVol_AL) %>%
tally
t0green   <- Sys.time()
}
# lines output below_up
if(time_compteur == T) t02 <- Sys.time()
self$targets %>%
filter(protocol == unique(line$protocol), cmt == cmtt) %>%
pull(time) %>% length -> nmax
res2 %>%
filter(be_up == 1 & ab_low == 1) %>%
group_by(id) %>%
tally -> nabove
res2 %>%
left_join(nabove, by = "id") %>%
filter(n == nmax) %>%
group_by(id) %>%
slice(1) %>% pull(id) -> idsbelowpos
line %>% filter(id %in% idsbelowpos) -> filters_pos_below_up
filters_pos_below_up$cmt = cmtt
filters_pos_below_up_reduc <- filter_reduc(filters_pos_below_up , filtre =  "below")
# %>%
#   arrange(k2, desc(lambda0))
pos_below[[cmtt]] <- bind_rows(pos_below[[cmtt]], filters_pos_below_up_reduc[names(pos_below[[1]])])
if(time_compteur == T){
poolVP_compteur_new$filter_pos_above <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new$nfilter_pobe_bef <- nrow(filters_pos_below_up)
poolVP_compteur_new$nfilters_posbe_af <- nrow(filters_pos_below_up_reduc)
}
# lines output bpostif above lo
if(time_compteur == T) t02 <- Sys.time()
res2 %>%
filter(be_up == 1 & ab_low == 1) %>%
group_by(id) %>%
tally -> nbelow
res2 %>%
left_join(nbelow, by = "id") %>%
filter(n == nmax) %>%
group_by(id) %>%
slice(1) %>% pull(id) -> idsabovepos
line %>% filter(id %in% idsabovepos) -> filters_ps_above_lo
filters_ps_above_lo$cmt = cmtt
filters_ps_above_lo_reduc <- filter_reduc(filters_ps_above_lo, filtre = "above")
# %>%
#   arrange(desc(k2), lambda0)
pos_above[[cmtt]] <- bind_rows(pos_above[[cmtt]], filters_ps_above_lo_reduc[names(pos_above[[1]])])
if(time_compteur == T){
poolVP_compteur_new$filter_pos_above <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new$nfilter_posab_bef <- nrow(filters_ps_above_lo)
poolVP_compteur_new$nfilters_posab_af <- nrow(filters_ps_above_lo_reduc)
}
###### Use the filters
if(time_compteur == T){
t02 <- Sys.time()
reff <- sum(is.na(poolVP$tumVol_AL))
}
if(nrow(filters_ps_above_lo_reduc) >0){
for(a in 1:nrow(filters_ps_above_lo_reduc)){
ref <- filters_ps_above_lo_reduc %>% slice(a)
poolVP %>%
mutate(test = !!parse_expr(filters[[ref$cmt]][["above"]])) %>%
filter(test == T) %>% pull(id) -> id_temp
poolVP$tumVol_AL[poolVP$id %in% id_temp & poolVP$protocol == unique(line$protocol)] <- T
}
}
if(time_compteur == T){
poolVP_compteur_new$time_add_above_fil <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new$n_add_above_fil <-   sum(is.na(poolVP$tumVol_AL)) - reff
}
if(time_compteur == T){
t02 <- Sys.time()
reff <- sum(is.na(poolVP$tumVol_BU))
}
if(nrow(filters_ps_above_lo_reduc) >0){
for(a in 1:nrow(filters_pos_below_up_reduc)){
ref <- filters_pos_below_up_reduc %>% slice(a)
poolVP %>%
mutate(test = !!parse_expr(filters[[ref$cmt]][["below"]])) %>%
filter(test == T) %>% pull(id) -> id_temp
poolVP$tumVol_BU[poolVP$id %in% id_temp & poolVP$protocol == unique(line$protocol)] <- T
}
if(time_compteur == T){
poolVP_compteur_new$time_add_below_fil <- difftime(Sys.time(), t02, units = "s")
poolVP_compteur_new$n_add_below_fil <-   sum(is.na(poolVP$tumVol_BU)) - reff
}
}
if(time_compteur == T){
afusegreen <-   poolVP %>%
group_by(tumVol_BU, tumVol_AL) %>%
tally  %>%
rename(n2 = n)
left_join(afusegreen, befusegreen) %>%
mutate(Diff = n2 - n) %>%
mutate(colname = paste0(tumVol_BU, "-", tumVol_AL)) -> temp3
for(a in 1:nrow(temp3)){
poolVP_compteur_new[temp3$colname[[a]]] <-  temp3$Diff[[a]]
}
poolVP_compteur_new$wholegreenfilter <- difftime(Sys.time(), t0green, units = "s")
}
if(time_compteur == T) t02 <- Sys.time()
res %>%
left_join(line %>% distinct(id, id), by = "id") %>%
filter(id %in% unique(poolVP$id)) %>%
mutate(protocol = unique(line$protocol)) %>%
group_by(id,protocol) %>%
nest() -> forjoin
siml <- siml %>%
bind_rows(forjoin)
if(time_compteur == T) poolVP_compteur_new$timesimlandjoin <- difftime(Sys.time(), t02, units = "s")
} # end use green filter
}# end for each compartment
# if() siml <- tibble(id = integer(), protocoles = character(), simul= list())
if(time_compteur == T)  timesaver$poolVP_compteur <- bind_rows(timesaver$poolVP_compteur,poolVP_compteur_new)
# Compute newratio for knowing when to stop
newratio <- is.na(poolVP[, col_to_add]) %>% sum
}# fin while 1
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new()
# self$set_targets(filter = Dose == 50 & cmt == "tumVol", ntime = 8)
self$set_targets(filter = cmt == "tumVol"  ,timeforce = c(12,19, 30,45))
VP_df <- crossing(k1 = c(0.5),
k2 = seq(0,8,0.0025),
ke = 1 ,#*  seq(0.6,1.4,0.2),
lambda0 =seq(0,0.16,0.0025),
lambda1 = c(12),
Vd =  40) %>% #c(0.8,1,1.2)) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
self$add_VP(VP_df, fillatend = F, reducefilteratend = T,  npersalve = 2000,  time_compteur = F, methodFilter = 2)
self$plot_VP(nmax = 2000)
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
VP_df <- crossing(k1 = c(0.5),
k2 = seq(0,8,0.0025),
ke = 1 ,#*  seq(0.6,1.4,0.2),
lambda0 =seq(0,0.16,0.0025),
lambda1 = c(12),
Vd =  40) %>% #c(0.8,1,1.2)) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
protoinf <- tibble(protocol = "dose50", cmt = "tumVol", time = c(45), min = 0, max = Inf)
infi <- VP_proj_creator$new()
infi$set_targets(manual = protoinf)
infi$targets
self <- infi
tinf <- Sys.time()
infi$add_VP(VP_df, fillatend = F, reducefilteratend = F,  npersalve = 2000,  time_compteur = F)
protobase <- tibble(protocol = "dose50", cmt = "tumVol", time = c(45), min = 50, max = 400)
base <- VP_proj_creator$new()
base$set_targets(manual = protobase)
base$targets
tbase <- Sys.time()
base$add_VP(VP_df, fillatend = F, reducefilteratend = F,  npersalve = 2000,  time_compteur = F)
tbase <- difftime(Sys.time(), tbase, units = "s")
VP_df
protobase3 <- tibble(protocol = "dose50", cmt = "tumVol", time = c(45), min = 150, max = 175)
base3 <- VP_proj_creator$new()
base3$set_targets(manual = protobase3)
base3$targets
tbase3 <- Sys.time()
base3$add_VP(VP_df, fillatend = F, reducefilteratend = F,  npersalve = 2000,  time_compteur = F)
tbase3 <- difftime(Sys.time(), tbase3, units = "s")
protonone <- tibble(protocol = "dose50", cmt = "tumVol", time = c(45), min = 150, max = 150.000000001)
none <- VP_proj_creator$new()
none$set_targets(manual = protonone)
none$targets
tnone <- Sys.time()
none$add_VP(VP_df, fillatend = F, reducefilteratend = F,  npersalve = 2000,  time_compteur = F)
tnone <- difftime(Sys.time(), tnone, units = "s")
protonone <- tibble(protocol = "dose50", cmt = "tumVol", time = c(45), min = 150, max = 150.000000001)
none <- VP_proj_creator$new()
none$set_targets(manual = protonone)
none$targets
tnone <- Sys.time()
none$add_VP(VP_df, fillatend = F, reducefilteratend = F,  npersalve = 2000,  time_compteur = F)
tnone <- difftime(Sys.time(), tnone, units = "s")
protobase3 <- tibble(protocol = "dose50", cmt = "tumVol", time = c(45), min = 150, max = 175)
base3 <- VP_proj_creator$new()
base3$set_targets(manual = protobase3)
base3$targets
tbase3 <- Sys.time()
base3$add_VP(VP_df, fillatend = F, reducefilteratend = F,  npersalve = 2000,  time_compteur = F)
tbase3 <- difftime(Sys.time(), tbase3, units = "s")
protobase3 <- tibble(protocol = "dose50", cmt = "tumVol", time = c(45), min = 150, max = 175)
base3 <- VP_proj_creator$new()
base3$set_targets(manual = protobase3)
base3$targets
tbase3 <- Sys.time()
base3$add_VP(VP_df, fillatend = F, reducefilteratend = F,  npersalve = 2000,  time_compteur = F)
tbase3 <- difftime(Sys.time(), tbase3, units = "s")
protobase3 <- tibble(protocol = "dose50", cmt = "tumVol", time = c(45), min = 150, max = 175)
base3 <- VP_proj_creator$new()
base3$set_targets(manual = protobase3)
base3$targets
tbase3 <- Sys.time()
base3$add_VP(VP_df, fillatend = F, reducefilteratend = F,  npersalve = 2000,  time_compteur = F,methodFilter = 2)
tbase3 <- difftime(Sys.time(), tbase3, units = "s")
protobase3 <- tibble(protocol = "dose50", cmt = "tumVol", time = c(45), min = 150, max = 175)
base3 <- VP_proj_creator$new()
base3$set_targets(manual = protobase3)
base3$targets
tbase3 <- Sys.time()
base3$add_VP(VP_df, fillatend = F, reducefilteratend = F,  npersalve = 2000,  time_compteur = F,methodFilter = 2)
tbase3 <- difftime(Sys.time(), tbase3, units = "s")
VP_df <- crossing(k1 = c(0.5),
k2 = seq(0,8,0.0025),
ke = 1 ,#*  seq(0.6,1.4,0.2),
lambda0 =seq(0,0.16,0.0025),
lambda1 = c(12),
Vd =  40) %>% #c(0.8,1,1.2)) %>%
map_df(function(x){
if(is.character(x)) return(x)
round(x,3)
} )
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
protobase <- tibble(protocol = "dose50", cmt = "tumVol", time = c(45), min = 50, max = 400)
base <- VP_proj_creator$new()
base$set_targets(manual = protobase)
base$targets
tbase <- Sys.time()
base$add_VP(VP_df, fillatend = F, reducefilteratend = F,  npersalve = 2000,  time_compteur = F)
tbase <- difftime(Sys.time(), tbase, units = "s")
protobase <- tibble(protocol = "dose50", cmt = "tumVol", time = c(45), min = 50, max = 400)
base <- VP_proj_creator$new()
base$set_targets(manual = protobase)
base$targets
tbase <- Sys.time()
base$add_VP(VP_df, fillatend = F, reducefilteratend = F,  npersalve = 2000,  time_compteur = F,methodFilter = 2)
tbase <- difftime(Sys.time(), tbase, units = "s")
protobase3 <- tibble(protocol = "dose50", cmt = "tumVol", time = c(45), min = 150, max = 175)
base3 <- VP_proj_creator$new()
base3$set_targets(manual = protobase3)
base3$targets
tbase3 <- Sys.time()
base3$add_VP(VP_df, fillatend = F, reducefilteratend = F,  npersalve = 2000,  time_compteur = F,methodFilter = 2)
tbase3 <- difftime(Sys.time(), tbase3, units = "s")
protonone <- tibble(protocol = "dose50", cmt = "tumVol", time = c(45), min = 150, max = 150.000000001)
none <- VP_proj_creator$new()
none$set_targets(manual = protonone)
none$targets
tnone <- Sys.time()
none$add_VP(VP_df, fillatend = F, reducefilteratend = F,  npersalve = 2000,  time_compteur = F)
tnone <- difftime(Sys.time(), tnone, units = "s")
244832^(1/5)
12^5
12^4
12^3
5^12
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new()
source("D:/these/Second_project/QSP/QSPVP/R/R6object.R")
self <- VP_proj_creator$new()
